{"repository_name":"cr6502","body":"# cr6502\n\nTODO: Write a description here\n\n## Installation\n\nTODO: Write installation instructions here\n\n## Usage\n\nTODO: Write usage instructions here\n\n## Development\n\nTODO: Write development instructions here\n\n## Contributing\n\n1. Fork it (<https://github.com/your-github-user/cr6502/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [D. Shwagginz](https://github.com/D-Shwagginz) - creator and maintainer\n","program":{"html_id":"cr6502/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"cr6502","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"cr6502/CPU","path":"CPU.html","kind":"class","full_name":"CPU","name":"CPU","abstract":false,"superclass":{"html_id":"cr6502/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"cr6502/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cr6502/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cr6502/6502.cr","line_number":134,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/6502.cr#L134"},{"filename":"src/cr6502/addressing.cr","line_number":1,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/addressing.cr#L1"},{"filename":"src/cr6502/instructions.cr","line_number":1,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions.cr#L1"},{"filename":"src/cr6502/instructions/bitwise_instructions.cr","line_number":1,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/bitwise_instructions.cr#L1"},{"filename":"src/cr6502/instructions/branch_instructions.cr","line_number":1,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/branch_instructions.cr#L1"},{"filename":"src/cr6502/instructions/compare_instructions.cr","line_number":1,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/compare_instructions.cr#L1"},{"filename":"src/cr6502/instructions/custom_instructions.cr","line_number":1,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/custom_instructions.cr#L1"},{"filename":"src/cr6502/instructions/flag_instructions.cr","line_number":1,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/flag_instructions.cr#L1"},{"filename":"src/cr6502/instructions/jump_instructions.cr","line_number":1,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/jump_instructions.cr#L1"},{"filename":"src/cr6502/instructions/math_instructions.cr","line_number":1,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/math_instructions.cr#L1"},{"filename":"src/cr6502/instructions/memory_instructions.cr","line_number":1,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/memory_instructions.cr#L1"},{"filename":"src/cr6502/instructions/other_instructions.cr","line_number":1,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/other_instructions.cr#L1"},{"filename":"src/cr6502/instructions/register_instructions.cr","line_number":1,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/register_instructions.cr#L1"},{"filename":"src/cr6502/instructions/stack_instructions.cr","line_number":1,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/stack_instructions.cr#L1"},{"filename":"src/cr6502/parser.cr","line_number":1,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser.cr#L1"},{"filename":"src/cr6502/parser/error.cr","line_number":1,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/error.cr#L1"},{"filename":"src/cr6502/parser/scanner.cr","line_number":1,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/scanner.cr#L1"},{"filename":"src/cr6502/parser/token.cr","line_number":1,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L1"}],"repository_name":"cr6502","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"BRK_LOCATION","name":"BRK_LOCATION","value":"65534_u16","doc":"Vector address for BRK","summary":"<p>Vector address for BRK</p>"},{"id":"INSTRUCTIONS","name":"INSTRUCTIONS","value":"[{\"BRK\", 0_u8, 7}, {\"ORAindx\", 1_u8, 6}, {\"ORAzpg\", 5_u8, 3}, {\"ASLzpg\", 6_u8, 5}, {\"PHP\", 8_u8, 3}, {\"ORAi\", 9_u8, 2, 2}, {\"ASLa\", 10_u8, 2}, {\"ORAabs\", 13_u8, 4}, {\"ASLabs\", 14_u8, 6}, {\"BPL\", 16_u8, 2}, {\"ORAindy\", 17_u8, 5}, {\"ORAzpgx\", 21_u8, 3}, {\"ASLzpgx\", 22_u8, 6}, {\"CLC\", 24_u8, 2}, {\"ORAabsy\", 25_u8, 4}, {\"ORAabsx\", 29_u8, 4}, {\"ASLabsx\", 30_u8, 7}, {\"JSR\", 32_u8, 6}, {\"ANDindx\", 33_u8, 6}, {\"BITzpg\", 36_u8, 3}, {\"ANDzpg\", 37_u8, 2}, {\"ROLzpg\", 38_u8, 5}, {\"PLP\", 40_u8, 4}, {\"ANDi\", 41_u8, 2}, {\"ROLa\", 42_u8, 2}, {\"BITabs\", 44_u8, 4}, {\"ANDabs\", 45_u8, 4}, {\"ROLabs\", 46_u8, 6}, {\"BMI\", 48_u8, 2}, {\"ANDindy\", 49_u8, 5}, {\"ANDzpgx\", 53_u8, 3}, {\"ROLzpgx\", 54_u8, 6}, {\"SEC\", 56_u8, 2}, {\"ANDabsy\", 57_u8, 4}, {\"ANDabsx\", 61_u8, 4}, {\"ROLabsx\", 62_u8, 7}, {\"RTI\", 64_u8, 6}, {\"EORindx\", 65_u8, 6}, {\"EORzpg\", 69_u8, 3}, {\"LSRzpg\", 70_u8, 5}, {\"PHA\", 72_u8, 3}, {\"EORi\", 73_u8, 2}, {\"LSRa\", 74_u8, 2}, {\"JMPabs\", 76_u8, 3}, {\"EORabs\", 77_u8, 4}, {\"LSRabs\", 78_u8, 6}, {\"BVC\", 80_u8, 2}, {\"EORindy\", 81_u8, 5}, {\"EORzpgx\", 85_u8, 4}, {\"LSRzpgx\", 86_u8, 6}, {\"CLI\", 88_u8, 2}, {\"EORabsy\", 89_u8, 4}, {\"EORabsx\", 93_u8, 4}, {\"LSRabs\", 94_u8, 7}, {\"RTS\", 96_u8, 6}, {\"ADCindx\", 97_u8, 6}, {\"ADCzpg\", 101_u8, 3}, {\"RORzpg\", 102_u8, 5}, {\"PLA\", 104_u8, 4}, {\"ADCi\", 105_u8, 2}, {\"RORa\", 106_u8, 2}, {\"JMPind\", 108_u8, 5}, {\"ADCabs\", 109_u8, 4}, {\"RORabs\", 110_u8, 6}, {\"BVS\", 112_u8, 2}, {\"ADCindy\", 113_u8, 5}, {\"ADCzpgx\", 117_u8, 4}, {\"RORzpgx\", 118_u8, 6}, {\"SEI\", 120_u8, 2}, {\"ADCabsy\", 121_u8, 4}, {\"ADCabsx\", 125_u8, 4}, {\"RORabsx\", 126_u8, 7}, {\"STAindx\", 129_u8, 6}, {\"STYzpg\", 132_u8, 3}, {\"STAzpg\", 133_u8, 3}, {\"STXzpg\", 134_u8, 3}, {\"DEY\", 136_u8, 2}, {\"TXA\", 138_u8, 2}, {\"STYabs\", 140_u8, 4}, {\"STAabs\", 141_u8, 4}, {\"STXabs\", 142_u8, 4}, {\"BCC\", 144_u8, 2}, {\"STAindy\", 145_u8, 6}, {\"STYzpgx\", 148_u8, 4}, {\"STAzpgx\", 149_u8, 4}, {\"STXzpgy\", 150_u8, 4}, {\"TYA\", 152_u8, 2}, {\"STAabsy\", 153_u8, 5}, {\"TXS\", 154_u8, 2}, {\"STAabsx\", 157_u8, 5}, {\"LDYi\", 160_u8, 2}, {\"LDAindx\", 161_u8, 6}, {\"LDXi\", 162_u8, 2}, {\"LDYzpg\", 164_u8, 3}, {\"LDAzpg\", 165_u8, 3}, {\"LDXzpg\", 166_u8, 3}, {\"TAY\", 168_u8, 2}, {\"LDAi\", 169_u8, 2}, {\"TAX\", 170_u8, 2}, {\"LDYabs\", 172_u8, 4}, {\"LDAabs\", 173_u8, 4}, {\"LDXabs\", 174_u8, 4}, {\"BCS\", 176_u8, 2}, {\"LDAindy\", 177_u8, 5}, {\"LDYzpgx\", 180_u8, 4}, {\"LDAzpgx\", 181_u8, 4}, {\"LDXzpgy\", 182_u8, 4}, {\"CLV\", 184_u8, 2}, {\"LDAabsy\", 185_u8, 4}, {\"TSX\", 186_u8, 2}, {\"LDYabsx\", 188_u8, 4}, {\"LDAabsx\", 189_u8, 4}, {\"LDXabsy\", 190_u8, 4}, {\"CPYi\", 192_u8, 2}, {\"CMPindx\", 193_u8, 6}, {\"CPYzpg\", 196_u8, 3}, {\"CMPzpg\", 197_u8, 3}, {\"DECzpg\", 198_u8, 5}, {\"INY\", 200_u8, 2}, {\"CMPi\", 201_u8, 2}, {\"DEX\", 202_u8, 2}, {\"CPYabs\", 204_u8, 4}, {\"CMPabs\", 205_u8, 4}, {\"DECabs\", 206_u8, 6}, {\"BNE\", 208_u8, 2}, {\"CMPindy\", 209_u8, 5}, {\"CMPzpgx\", 213_u8, 4}, {\"DECzpgx\", 214_u8, 6}, {\"CLD\", 216_u8, 2}, {\"CMPabsy\", 217_u8, 4}, {\"CMPabsx\", 221_u8, 4}, {\"DECabsx\", 222_u8, 7}, {\"CPXi\", 224_u8, 2}, {\"SBCindx\", 225_u8, 6}, {\"CPXzpg\", 228_u8, 3}, {\"SBCzpg\", 229_u8, 3}, {\"INCzpg\", 230_u8, 5}, {\"INX\", 232_u8, 2}, {\"SBCi\", 233_u8, 2}, {\"NOP\", 234_u8, 2}, {\"CPXabs\", 236_u8, 4}, {\"SBCabs\", 237_u8, 4}, {\"INCabs\", 238_u8, 6}, {\"BEQ\", 240_u8, 2}, {\"SBCindy\", 241_u8, 5}, {\"SBCzpgx\", 245_u8, 4}, {\"INCzpgx\", 246_u8, 6}, {\"SED\", 248_u8, 2}, {\"SBCabsy\", 249_u8, 4}, {\"SBCabsx\", 253_u8, 4}, {\"INCabsx\", 254_u8, 7}, {\"PRTzpg\", 2_u8, 2}, {\"PRTabs\", 3_u8, 3}, {\"LOG\", 4_u8, 10}, {\"STP\", 7_u8, 2}, {\"BCClabel\", 11_u8, 2}, {\"BCSlabel\", 27_u8, 2}, {\"BEQlabel\", 43_u8, 2}, {\"BMIlabel\", 59_u8, 2}, {\"BNElabel\", 75_u8, 2}, {\"BPLlabel\", 91_u8, 2}, {\"BVClabel\", 107_u8, 2}, {\"BVSlabel\", 123_u8, 2}]","doc":"List of instructions sorted by its opcode\n\nFormat is {\"InstructionName\", opcode, cycle length, byte length}","summary":"<p>List of instructions sorted by its opcode</p>"},{"id":"KEYWORDS","name":"KEYWORDS","value":"{\"ADC\" => TokenType::ADC, \"AND\" => TokenType::AND, \"ASL\" => TokenType::ASL, \"BCC\" => TokenType::BCC, \"BCS\" => TokenType::BCS, \"BEQ\" => TokenType::BEQ, \"BIT\" => TokenType::BIT, \"BMI\" => TokenType::BMI, \"BNE\" => TokenType::BNE, \"BPL\" => TokenType::BPL, \"BRK\" => TokenType::BRK, \"BVC\" => TokenType::BVC, \"BVS\" => TokenType::BVS, \"CLC\" => TokenType::CLC, \"CLD\" => TokenType::CLD, \"CLI\" => TokenType::CLI, \"CLV\" => TokenType::CLV, \"CMP\" => TokenType::CMP, \"CPX\" => TokenType::CPX, \"CPY\" => TokenType::CPY, \"DEC\" => TokenType::DEC, \"DEX\" => TokenType::DEX, \"DEY\" => TokenType::DEY, \"EOR\" => TokenType::EOR, \"INC\" => TokenType::INC, \"INX\" => TokenType::INX, \"INY\" => TokenType::INY, \"JMP\" => TokenType::JMP, \"JSR\" => TokenType::JSR, \"LDA\" => TokenType::LDA, \"LDX\" => TokenType::LDX, \"LDY\" => TokenType::LDY, \"LSR\" => TokenType::LSR, \"NOP\" => TokenType::NOP, \"ORA\" => TokenType::ORA, \"PHA\" => TokenType::PHA, \"PHP\" => TokenType::PHP, \"PLA\" => TokenType::PLA, \"PLP\" => TokenType::PLP, \"ROL\" => TokenType::ROL, \"ROR\" => TokenType::ROR, \"RTI\" => TokenType::RTI, \"RTS\" => TokenType::RTS, \"SBC\" => TokenType::SBC, \"SEC\" => TokenType::SEC, \"SED\" => TokenType::SED, \"SEI\" => TokenType::SEI, \"STA\" => TokenType::STA, \"STX\" => TokenType::STX, \"STY\" => TokenType::STY, \"TAX\" => TokenType::TAX, \"TAY\" => TokenType::TAY, \"TSX\" => TokenType::TSX, \"TXA\" => TokenType::TXA, \"TXS\" => TokenType::TXS, \"TYA\" => TokenType::TYA, \"PRT\" => TokenType::PRT, \"LOG\" => TokenType::LOG, \"STP\" => TokenType::STP}","doc":"The keywords for the tokens, used when parsing","summary":"<p>The keywords for the tokens, used when parsing</p>"},{"id":"RES_LOCATION","name":"RES_LOCATION","value":"65532_u16","doc":"Vector address for RESET","summary":"<p>Vector address for RESET</p>"}],"doc":"## The 6502 CPU\n\n### Assembly:\nThe main powerhouse of the emulator is the `CPU#load_asm()` method.\n\nThe method allows you to type in 6502 asm code and run it through Crystal.<br>\nThe assembler has the ability to use labels as well as a few custom instructions<br>\nIt also uses a semicolon ';' for inline comments\n\nExample:\n```\n; Look at this cool comment!\ncpu = CPU.new(1.0, 0x0600_u16, CPU::RES_LOCATION - 2)\ncpu.load_asm(\"\nlda #$14\n\")\ncpu.execute\nputs cpu.accumulator\n```\n\nTo see all of the custom instructions, please see [custom_instructions.cr](https://github.com/D-Shwagginz/cr6502/blob/master/src/cr6502/instructions/custom_instructions.cr)\n\nExample:\n```\ncpu.load_asm(\"\nprt 22\n\")\ncpu.execute # => puts \"Type: UInt8 | Hex: 0x16 | Decimal: 22 | Binary: 0b00010110\"\n```\n\nThe assembler also has some predefined labels:<br>\n`resvec:` will set the value at `RES_LOCATION` to the label's memory location.<br>\n`brkvec:` will set the value at `BRK_LOCATION` to the label's memory location.<br>\n\nExample:\n```\ncpu = CPU.new(1.0, 0x0200_u16)\ncpu.load_asm(\"\nresvec:\nnop\nbrkvec:\n\")\nputs cpu.peek(CPU::BRK_LOCATION, true).to_s(16) # => 200\nputs cpu.peek(CPU::RES_LOCATION, true).to_s(16) # => 201\n```\n\nBeing written in Crystal, you can use string interpolation when writing assembly code, giving access for any UInt8 and UInt16\nto be injected into the code.\n\n# Example:\n```\nx = 0xa4\ncpu.load_asm(\"\nlda ##{x}\n\")\ncpu.execute\nputs cpu.accumulator.to_s(16) # => a4\n```\n\nNote that the values are assigned at the assembler's compile time, therefore\n\n```\nx = 0xa4_u8\ncpu.load_asm(\"\nlda ##{x}\nprt #{cpu.accumulator}\n\")\ncpu.execute                   # => puts \"Type: UInt8 | Hex: 0x00 | Decimal: 0 | Binary: 0b00000000\"\nputs cpu.accumulator.to_s(16) # => a4\n```\n\nIn the above example, at compile time, `cpu.accumulator` is set to 0. It only gets changed at the runtime of the code.<br>\nYou can however achieve the hoped for effect by using multiple `CPU#load_asm` methods:\n\n```\nx = 0xa4_u8\ncpu.load_asm(\"\nlda ##{x}\n\")\n\ncpu.execute\n\ncpu.load_asm(\"\nprt #{cpu.accumulator}\n\")\n\ncpu.execute # => puts \"Type: UInt8 | Hex: 0xa4 | Decimal: 164 | Binary: 0b10100100\"\n```\n\nBe careful when doing this though as you must keep in mind that the memory has not reset, but using `CPU#load_asm` will reset the `CPU#program_counter`\nto its original value, or to the value of a `resvec:`\n\nThis means that all the instructions set by any previous `CPU#load_asm`'s will still be there in memory.\n\nTo counteract this issue, ensure that a brk is set at the end of any code\n\nYou can however \"append\" code by setting the `start_location` of `CPU#load_asm` manually\n\nExample\n```\ncpu = CPU.new(1.0, 0x0600_u16, CPU::RES_LOCATION - 2)\n\ncpu.load_asm(\"\nlda #01\n\")\n\n# Code = a9 01 #\n\ncpu.load_asm(0x0603\"\nlda #01\n\")\n\n# Code = a9 01 a9 01 #\n```\n\nYou can also use `resvec:` to edit the default `CPU#program_counter` location when editing code\n\nExample\n```\ncpu.load_asm(\"\nlda #01\nresvec:\n\")\n\n# Code = a9 01 #\n\ncpu.load_asm(\"\nlda #01\n\")\n\n# Code = a9 01 a9 01 #\n```\n","summary":"<h2><a id=\"the-6502-cpu\" class=\"anchor\" href=\"#the-6502-cpu\">  <svg class=\"octicon-link\" aria-hidden=\"true\">\n    <use href=\"#octicon-link\"/>\n  </svg>\n</a>The 6502 CPU</h2>","constructors":[{"html_id":"new(clock_cycle_mhz:Float=1.79,reset:UInt16=0,brk:UInt16=0)-class-method","name":"new","doc":"Creates a 6502 CPU\n\nThe clock cycle is set in megahertz\n\n`reset` is the value set at `RES_LOCATION` and is used to find where the `program_counter` should start\n\n`brk` is the value set at `BRK_LOCATION` and is used to find where `CPU#brk` should goto","summary":"<p>Creates a 6502 CPU</p>","abstract":false,"args":[{"name":"clock_cycle_mhz","default_value":"1.79","external_name":"clock_cycle_mhz","restriction":"Float"},{"name":"reset","default_value":"0","external_name":"reset","restriction":"UInt16"},{"name":"brk","default_value":"0","external_name":"brk","restriction":"UInt16"}],"args_string":"(clock_cycle_mhz : Float = 1.79, reset : UInt16 = 0, brk : UInt16 = 0)","args_html":"(clock_cycle_mhz : Float = <span class=\"n\">1.79</span>, reset : UInt16 = <span class=\"n\">0</span>, brk : UInt16 = <span class=\"n\">0</span>)","location":{"filename":"src/cr6502/6502.cr","line_number":233,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/6502.cr#L233"},"def":{"name":"new","args":[{"name":"clock_cycle_mhz","default_value":"1.79","external_name":"clock_cycle_mhz","restriction":"Float"},{"name":"reset","default_value":"0","external_name":"reset","restriction":"UInt16"},{"name":"brk","default_value":"0","external_name":"brk","restriction":"UInt16"}],"visibility":"Public","body":"_ = allocate\n_.initialize(clock_cycle_mhz, reset, brk)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"accumulator:UInt8-instance-method","name":"accumulator","doc":"The 8-bit accumulator. Used in arithmetic operations","summary":"<p>The 8-bit accumulator.</p>","abstract":false,"location":{"filename":"src/cr6502/6502.cr","line_number":190,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/6502.cr#L190"},"def":{"name":"accumulator","return_type":"UInt8","visibility":"Public","body":"@accumulator"}},{"html_id":"adc(m_value:UInt8)-instance-method","name":"adc","doc":"Add with Carry\n\nADC behavior depends on the state of the `CPU::Flags::DecimalMode` flag. In decimal mode, the values upon which the addition is performed are interpreted as packed BCD (Binary Coded Decimal).","summary":"<p>Add with Carry</p>","abstract":false,"args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8"}],"args_string":"(m_value : UInt8)","args_html":"(m_value : UInt8)","location":{"filename":"src/cr6502/instructions/math_instructions.cr","line_number":5,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/math_instructions.cr#L5"},"def":{"name":"adc","args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8"}],"visibility":"Public","body":"t = (@accumulator + m_value) + (get_flag(Flags::Carry)).to_unsafe\nset_flag(Flags::Overflow, (@accumulator.bit(7)) != (t.bit(7)))\nset_flag(Flags::Negative, (@accumulator.bit(7)) == 1)\nset_flag(Flags::Zero, t == 0)\nif get_flag(Flags::DecimalMode)\n  t = ((bcd(@accumulator)) + (bcd(m_value.to_u8))) + (get_flag(Flags::Carry)).to_unsafe\n  set_flag(Flags::Carry, t > 99)\nelse\n  set_flag(Flags::Carry, t > 255)\nend\n@accumulator = t & 255\n"}},{"html_id":"add_instruction(hex:UInt8|UInt16)-instance-method","name":"add_instruction","doc":"Adds an instruction, given it's opcode, into the current location in memory of the `CPU#program_counter` and increments the `CPU#program_counter` by the byte length of the given hex","summary":"<p>Adds an instruction, given it's opcode, into the current location in memory of the <code><a href=\"CPU.html#program_counter%3AUInt16-instance-method\">CPU#program_counter</a></code> and increments the <code><a href=\"CPU.html#program_counter%3AUInt16-instance-method\">CPU#program_counter</a></code> by the byte length of the given hex</p>","abstract":false,"args":[{"name":"hex","external_name":"hex","restriction":"UInt8 | UInt16"}],"args_string":"(hex : UInt8 | UInt16)","args_html":"(hex : UInt8 | UInt16)","location":{"filename":"src/cr6502/instructions.cr","line_number":186,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions.cr#L186"},"def":{"name":"add_instruction","args":[{"name":"hex","external_name":"hex","restriction":"UInt8 | UInt16"}],"visibility":"Public","body":"poke(@program_counter, hex)\n@program_counter = @program_counter + (hex.is_a?(UInt8) ? 1 : 2)\n"}},{"html_id":"and(m_value:UInt8)-instance-method","name":"and","doc":"Bitwise AND with Accumulator","summary":"<p>Bitwise AND with Accumulator</p>","abstract":false,"args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8"}],"args_string":"(m_value : UInt8)","args_html":"(m_value : UInt8)","location":{"filename":"src/cr6502/instructions/bitwise_instructions.cr","line_number":3,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/bitwise_instructions.cr#L3"},"def":{"name":"and","args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8"}],"visibility":"Public","body":"@accumulator = @accumulator & m_value\nset_flag(Flags::Negative, (@accumulator.bit(7)) == 1)\nset_flag(Flags::Zero, @accumulator == 0)\n"}},{"html_id":"asl(m_value:UInt8,m:UInt16|UInt8,accumulator:Bool=false)-instance-method","name":"asl","doc":"Arithmetic Shift Left\n\nASL shifts all bits left one position.\n0 is shifted into bit 0 and the original bit 7 is shifted into the Carry.","summary":"<p>Arithmetic Shift Left</p>","abstract":false,"args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8"},{"name":"m","external_name":"m","restriction":"UInt16 | UInt8"},{"name":"accumulator","default_value":"false","external_name":"accumulator","restriction":"Bool"}],"args_string":"(m_value : UInt8, m : UInt16 | UInt8, accumulator : Bool = false)","args_html":"(m_value : UInt8, m : UInt16 | UInt8, accumulator : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/cr6502/instructions/bitwise_instructions.cr","line_number":27,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/bitwise_instructions.cr#L27"},"def":{"name":"asl","args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8"},{"name":"m","external_name":"m","restriction":"UInt16 | UInt8"},{"name":"accumulator","default_value":"false","external_name":"accumulator","restriction":"Bool"}],"visibility":"Public","body":"set_flag(Flags::Carry, (m_value.bit(7)) == 1)\nif accumulator\n  @accumulator = ((@accumulator << 1) & 254)\nelse\n  poke(m, (  (m_value << 1) & 254))\nend\nset_flag(Flags::Negative, (m_value.bit(7)) == 1)\nset_flag(Flags::Zero, m_value == 0)\n"}},{"html_id":"bcc(m_value:UInt8|UInt16)-instance-method","name":"bcc","doc":"Branch on Carry Clear","summary":"<p>Branch on Carry Clear</p>","abstract":false,"args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8 | UInt16"}],"args_string":"(m_value : UInt8 | UInt16)","args_html":"(m_value : UInt8 | UInt16)","location":{"filename":"src/cr6502/instructions/branch_instructions.cr","line_number":40,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/branch_instructions.cr#L40"},"def":{"name":"bcc","args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8 | UInt16"}],"visibility":"Public","body":"if (get_flag(Flags::Carry)) == false\n  if (typeof(m_value)) == UInt16\n    u_m_value = m_value.to_i - @program_counter\n  else\n    u_m_value = (m_value.to_i16 - 128).to_i8\n  end\n  page_difference = ((@program_counter.to_i - ((@program_counter.to_i // 255) * 255)) + u_m_value.to_i)\n  @instruction_cycles = @instruction_cycles + (page_difference > 255 || page_difference < 0 ? 2 : 1)\n  @program_counter = @program_counter + u_m_value.to_i16\nend"}},{"html_id":"bcd(byte:UInt8|Int8)-instance-method","name":"bcd","doc":"Calculates a byte into a [Binary Coded Decimal (BCD)](https://www.csh.rit.edu/~moffitt/docs/6502.html#BCD)\n\nBCD is whereby the upper and lower nibbles (4-bits) of a byte (8-bits) are treated as two digits in a decimal number;\n\nThe upper nibble contains the number from the 'tens column'; and the lower nibble, the number from the 'units column'","summary":"<p>Calculates a byte into a <a href=\"https://www.csh.rit.edu/~moffitt/docs/6502.html#BCD\">Binary Coded Decimal (BCD)</a></p>","abstract":false,"args":[{"name":"byte","external_name":"byte","restriction":"UInt8 | Int8"}],"args_string":"(byte : UInt8 | Int8)","args_html":"(byte : UInt8 | Int8)","location":{"filename":"src/cr6502/6502.cr","line_number":296,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/6502.cr#L296"},"def":{"name":"bcd","args":[{"name":"byte","external_name":"byte","restriction":"UInt8 | Int8"}],"visibility":"Public","body":"tens = byte.bits(4..7)\nones = byte.bits(0..3)\nreturn \"#{tens}#{ones}\".to_u8\n"}},{"html_id":"bcs(m_value:UInt8|UInt16)-instance-method","name":"bcs","doc":"Branch on Carry Set","summary":"<p>Branch on Carry Set</p>","abstract":false,"args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8 | UInt16"}],"args_string":"(m_value : UInt8 | UInt16)","args_html":"(m_value : UInt8 | UInt16)","location":{"filename":"src/cr6502/instructions/branch_instructions.cr","line_number":100,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/branch_instructions.cr#L100"},"def":{"name":"bcs","args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8 | UInt16"}],"visibility":"Public","body":"if (get_flag(Flags::Carry)) == true\n  if (typeof(m_value)) == UInt16\n    u_m_value = m_value.to_i - @program_counter\n  else\n    u_m_value = (m_value.to_i16 - 128).to_i8\n  end\n  page_difference = ((@program_counter.to_i - ((@program_counter.to_i // 255) * 255)) + u_m_value.to_i)\n  @instruction_cycles = @instruction_cycles + (page_difference > 255 || page_difference < 0 ? 2 : 1)\n  @program_counter = @program_counter + u_m_value.to_i16\nend"}},{"html_id":"beq(m_value:UInt8|UInt16)-instance-method","name":"beq","doc":"Branch on Equal","summary":"<p>Branch on Equal</p>","abstract":false,"args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8 | UInt16"}],"args_string":"(m_value : UInt8 | UInt16)","args_html":"(m_value : UInt8 | UInt16)","location":{"filename":"src/cr6502/instructions/branch_instructions.cr","line_number":115,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/branch_instructions.cr#L115"},"def":{"name":"beq","args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8 | UInt16"}],"visibility":"Public","body":"if (get_flag(Flags::Zero)) == true\n  if (typeof(m_value)) == UInt16\n    u_m_value = m_value.to_i - @program_counter\n  else\n    u_m_value = (m_value.to_i16 - 128).to_i8\n  end\n  page_difference = ((@program_counter.to_i - ((@program_counter.to_i // 255) * 255)) + u_m_value.to_i)\n  @instruction_cycles = @instruction_cycles + (page_difference > 255 || page_difference < 0 ? 2 : 1)\n  @program_counter = @program_counter + u_m_value.to_i16\nend"}},{"html_id":"bit(m_value:UInt8)-instance-method","name":"bit","doc":"Test Bits\n\nBIT sets the Z flag as though the value in the address tested were ANDed with the accumulator.\n\nThe N and V flags are set equal to bits 7 and 6 respectively of the value in the tested address.","summary":"<p>Test Bits</p>","abstract":false,"args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8"}],"args_string":"(m_value : UInt8)","args_html":"(m_value : UInt8)","location":{"filename":"src/cr6502/instructions/compare_instructions.cr","line_number":39,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/compare_instructions.cr#L39"},"def":{"name":"bit","args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8"}],"visibility":"Public","body":"t = @accumulator & m_value\nset_flag(Flags::Negative, (t.bit(7)) == 1)\nset_flag(Flags::Overflow, (t.bit(6)) == 1)\nset_flag(Flags::Zero, t == 0)\n"}},{"html_id":"bmi(m_value:UInt8|UInt16)-instance-method","name":"bmi","doc":"Branch on Minus","summary":"<p>Branch on Minus</p>","abstract":false,"args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8 | UInt16"}],"args_string":"(m_value : UInt8 | UInt16)","args_html":"(m_value : UInt8 | UInt16)","location":{"filename":"src/cr6502/instructions/branch_instructions.cr","line_number":70,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/branch_instructions.cr#L70"},"def":{"name":"bmi","args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8 | UInt16"}],"visibility":"Public","body":"if (get_flag(Flags::Negative)) == true\n  if (typeof(m_value)) == UInt16\n    u_m_value = m_value.to_i - @program_counter\n  else\n    u_m_value = (m_value.to_i16 - 128).to_i8\n  end\n  page_difference = ((@program_counter.to_i - ((@program_counter.to_i // 255) * 255)) + u_m_value.to_i)\n  @instruction_cycles = @instruction_cycles + (page_difference > 255 || page_difference < 0 ? 2 : 1)\n  @program_counter = @program_counter + u_m_value.to_i16\nend"}},{"html_id":"bne(m_value:UInt8|UInt16)-instance-method","name":"bne","doc":"Branch on Not Equal","summary":"<p>Branch on Not Equal</p>","abstract":false,"args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8 | UInt16"}],"args_string":"(m_value : UInt8 | UInt16)","args_html":"(m_value : UInt8 | UInt16)","location":{"filename":"src/cr6502/instructions/branch_instructions.cr","line_number":55,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/branch_instructions.cr#L55"},"def":{"name":"bne","args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8 | UInt16"}],"visibility":"Public","body":"if (get_flag(Flags::Zero)) == false\n  if (typeof(m_value)) == UInt16\n    u_m_value = m_value.to_i - @program_counter\n  else\n    u_m_value = (m_value.to_i16 - 128).to_i8\n  end\n  page_difference = ((@program_counter.to_i - ((@program_counter.to_i // 255) * 255)) + u_m_value.to_i)\n  @instruction_cycles = @instruction_cycles + (page_difference > 255 || page_difference < 0 ? 2 : 1)\n  @program_counter = @program_counter + u_m_value.to_i16\nend"}},{"html_id":"bpl(m_value:UInt8|UInt16)-instance-method","name":"bpl","doc":"Branch on Plus","summary":"<p>Branch on Plus</p>","abstract":false,"args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8 | UInt16"}],"args_string":"(m_value : UInt8 | UInt16)","args_html":"(m_value : UInt8 | UInt16)","location":{"filename":"src/cr6502/instructions/branch_instructions.cr","line_number":10,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/branch_instructions.cr#L10"},"def":{"name":"bpl","args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8 | UInt16"}],"visibility":"Public","body":"if (get_flag(Flags::Negative)) == false\n  if (typeof(m_value)) == UInt16\n    u_m_value = m_value.to_i - @program_counter\n  else\n    u_m_value = (m_value.to_i16 - 128).to_i8\n  end\n  page_difference = ((@program_counter.to_i - ((@program_counter.to_i // 255) * 255)) + u_m_value.to_i)\n  @instruction_cycles = @instruction_cycles + (page_difference > 255 || page_difference < 0 ? 2 : 1)\n  @program_counter = @program_counter + u_m_value.to_i16\nend"}},{"html_id":"brk-instance-method","name":"brk","doc":"Break\n\nBRK sets the B flag, and then generates a forced interrupt. The Interrupt flag is ignored and the CPU goes through the normal interrupt process. In the interrupt service routine, the state of the B flag can be used to distinguish a BRK from a standard interrupt.\n\nBRK causes a non-maskable interrupt and increments the program counter by one. Therefore an `CPU#rti` will go to the address of the BRK +2 so that BRK may be used to replace a two-byte instruction for debugging and the subsequent RTI will be correct.","summary":"<p>Break</p>","abstract":false,"location":{"filename":"src/cr6502/instructions/other_instructions.cr","line_number":7,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/other_instructions.cr#L7"},"def":{"name":"brk","visibility":"Public","body":"@program_counter = @program_counter + 1\n@stack_pointer = @stack_pointer - 1\npoke(@stack_pointer.to_i + 256, @program_counter)\n@stack_pointer = @stack_pointer - 1\npoke(@stack_pointer.to_i + 256, @flags | 16_u8)\n@stack_pointer = @stack_pointer - 1\n@program_counter = (peek(BRK_LOCATION, true)).to_u16\n"}},{"html_id":"bvc(m_value:UInt8|UInt16)-instance-method","name":"bvc","doc":"Branch on Overflow Clear","summary":"<p>Branch on Overflow Clear</p>","abstract":false,"args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8 | UInt16"}],"args_string":"(m_value : UInt8 | UInt16)","args_html":"(m_value : UInt8 | UInt16)","location":{"filename":"src/cr6502/instructions/branch_instructions.cr","line_number":25,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/branch_instructions.cr#L25"},"def":{"name":"bvc","args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8 | UInt16"}],"visibility":"Public","body":"if (get_flag(Flags::Overflow)) == false\n  if (typeof(m_value)) == UInt16\n    u_m_value = m_value.to_i - @program_counter\n  else\n    u_m_value = (m_value.to_i16 - 128).to_i8\n  end\n  page_difference = ((@program_counter.to_i - ((@program_counter.to_i // 255) * 255)) + u_m_value.to_i)\n  @instruction_cycles = @instruction_cycles + (page_difference > 255 || page_difference < 0 ? 2 : 1)\n  @program_counter = @program_counter + u_m_value.to_i16\nend"}},{"html_id":"bvs(m_value:UInt8|UInt16)-instance-method","name":"bvs","doc":"Branch on Overflow Set","summary":"<p>Branch on Overflow Set</p>","abstract":false,"args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8 | UInt16"}],"args_string":"(m_value : UInt8 | UInt16)","args_html":"(m_value : UInt8 | UInt16)","location":{"filename":"src/cr6502/instructions/branch_instructions.cr","line_number":85,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/branch_instructions.cr#L85"},"def":{"name":"bvs","args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8 | UInt16"}],"visibility":"Public","body":"if (get_flag(Flags::Overflow)) == true\n  if (typeof(m_value)) == UInt16\n    u_m_value = m_value.to_i - @program_counter\n  else\n    u_m_value = (m_value.to_i16 - 128).to_i8\n  end\n  page_difference = ((@program_counter.to_i - ((@program_counter.to_i // 255) * 255)) + u_m_value.to_i)\n  @instruction_cycles = @instruction_cycles + (page_difference > 255 || page_difference < 0 ? 2 : 1)\n  @program_counter = @program_counter + u_m_value.to_i16\nend"}},{"html_id":"clc-instance-method","name":"clc","doc":"Clear Carry","summary":"<p>Clear Carry</p>","abstract":false,"location":{"filename":"src/cr6502/instructions/flag_instructions.cr","line_number":3,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/flag_instructions.cr#L3"},"def":{"name":"clc","visibility":"Public","body":"set_flag(Flags::Carry, false)"}},{"html_id":"cld-instance-method","name":"cld","doc":"Clear Decimal","summary":"<p>Clear Decimal</p>","abstract":false,"location":{"filename":"src/cr6502/instructions/flag_instructions.cr","line_number":23,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/flag_instructions.cr#L23"},"def":{"name":"cld","visibility":"Public","body":"set_flag(Flags::DecimalMode, false)"}},{"html_id":"cli-instance-method","name":"cli","doc":"Clear Interrupt","summary":"<p>Clear Interrupt</p>","abstract":false,"location":{"filename":"src/cr6502/instructions/flag_instructions.cr","line_number":13,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/flag_instructions.cr#L13"},"def":{"name":"cli","visibility":"Public","body":"set_flag(Flags::InterruptDisable, false)"}},{"html_id":"clock_cycle_mhz:Float64-instance-method","name":"clock_cycle_mhz","doc":"The clock cycle in megahertz to run at.\n\nDefaults to the NES's 6502 speed, 1.79mhz.\n\nSet in `CPU#initialize`","summary":"<p>The clock cycle in megahertz to run at.</p>","abstract":false,"location":{"filename":"src/cr6502/6502.cr","line_number":216,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/6502.cr#L216"},"def":{"name":"clock_cycle_mhz","return_type":"Float64","visibility":"Public","body":"@clock_cycle_mhz"}},{"html_id":"clv-instance-method","name":"clv","doc":"Clear Overflow","summary":"<p>Clear Overflow</p>","abstract":false,"location":{"filename":"src/cr6502/instructions/flag_instructions.cr","line_number":33,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/flag_instructions.cr#L33"},"def":{"name":"clv","visibility":"Public","body":"set_flag(Flags::Overflow, false)"}},{"html_id":"cmp(m_value:UInt8)-instance-method","name":"cmp","doc":"Compare Accumulator\n\nCompare sets processor flags as if a subtraction had been carried out.\n\nIf the accumulator and the compared value are equal, the result of the subtraction is zero and the Zero (Z) flag is set. If the accumulator is equal or greater than the compared value, the Carry (C) flag is set.","summary":"<p>Compare Accumulator</p>","abstract":false,"args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8"}],"args_string":"(m_value : UInt8)","args_html":"(m_value : UInt8)","location":{"filename":"src/cr6502/instructions/compare_instructions.cr","line_number":7,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/compare_instructions.cr#L7"},"def":{"name":"cmp","args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8"}],"visibility":"Public","body":"t = @accumulator - m_value\nset_flag(Flags::Carry, @accumulator >= m_value)\nset_flag(Flags::Negative, (t.bit(7)) == 1)\nset_flag(Flags::Zero, t == 0)\n"}},{"html_id":"cpx(m_value:UInt8)-instance-method","name":"cpx","doc":"Compare X Register\n\nOperation and flag results are identical to equivalent mode accumulator `CPU#cmp` operations.","summary":"<p>Compare X Register</p>","abstract":false,"args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8"}],"args_string":"(m_value : UInt8)","args_html":"(m_value : UInt8)","location":{"filename":"src/cr6502/instructions/compare_instructions.cr","line_number":17,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/compare_instructions.cr#L17"},"def":{"name":"cpx","args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8"}],"visibility":"Public","body":"t = @x_index - m_value\nset_flag(Flags::Carry, @x_index >= m_value)\nset_flag(Flags::Negative, (t.bit(7)) == 1)\nset_flag(Flags::Zero, t == 0)\n"}},{"html_id":"cpy(m_value:UInt8)-instance-method","name":"cpy","doc":"Compare Y Register\n\nOperation and flag results are identical to equivalent mode accumulator `CPU#cmp` operations.","summary":"<p>Compare Y Register</p>","abstract":false,"args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8"}],"args_string":"(m_value : UInt8)","args_html":"(m_value : UInt8)","location":{"filename":"src/cr6502/instructions/compare_instructions.cr","line_number":27,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/compare_instructions.cr#L27"},"def":{"name":"cpy","args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8"}],"visibility":"Public","body":"t = @y_index - m_value\nset_flag(Flags::Carry, @y_index >= m_value)\nset_flag(Flags::Negative, (t.bit(7)) == 1)\nset_flag(Flags::Zero, t == 0)\n"}},{"html_id":"dec(m_value:UInt8,m:UInt16|UInt8)-instance-method","name":"dec","doc":"Decrement Memory","summary":"<p>Decrement Memory</p>","abstract":false,"args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8"},{"name":"m","external_name":"m","restriction":"UInt16 | UInt8"}],"args_string":"(m_value : UInt8, m : UInt16 | UInt8)","args_html":"(m_value : UInt8, m : UInt16 | UInt8)","location":{"filename":"src/cr6502/instructions/memory_instructions.cr","line_number":24,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/memory_instructions.cr#L24"},"def":{"name":"dec","args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8"},{"name":"m","external_name":"m","restriction":"UInt16 | UInt8"}],"visibility":"Public","body":"poke(m, (m_value - 1) & 255)\nset_flag(Flags::Negative, (m_value.bit(7)) == 1)\nset_flag(Flags::Zero, m_value == 0)\n"}},{"html_id":"dex-instance-method","name":"dex","doc":"Decrement X","summary":"<p>Decrement X</p>","abstract":false,"location":{"filename":"src/cr6502/instructions/register_instructions.cr","line_number":19,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/register_instructions.cr#L19"},"def":{"name":"dex","visibility":"Public","body":"@x_index = @x_index - 1\nset_flag(Flags::Zero, @x_index == 0)\nset_flag(Flags::Negative, (@x_index.bit(7)) == 1)\n"}},{"html_id":"dey-instance-method","name":"dey","doc":"Decrement Y","summary":"<p>Decrement Y</p>","abstract":false,"location":{"filename":"src/cr6502/instructions/register_instructions.cr","line_number":47,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/register_instructions.cr#L47"},"def":{"name":"dey","visibility":"Public","body":"@y_index = @y_index - 1\nset_flag(Flags::Zero, @y_index == 0)\nset_flag(Flags::Negative, (@y_index.bit(7)) == 1)\n"}},{"html_id":"eor(m_value:UInt8)-instance-method","name":"eor","doc":"Bitwise Exclusive-OR with Accumulator","summary":"<p>Bitwise Exclusive-OR with Accumulator</p>","abstract":false,"args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8"}],"args_string":"(m_value : UInt8)","args_html":"(m_value : UInt8)","location":{"filename":"src/cr6502/instructions/bitwise_instructions.cr","line_number":10,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/bitwise_instructions.cr#L10"},"def":{"name":"eor","args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8"}],"visibility":"Public","body":"@accumulator = @accumulator ^ m_value\nset_flag(Flags::Negative, (@accumulator.bit(7)) == 1)\nset_flag(Flags::Zero, @accumulator == 0)\n"}},{"html_id":"execute(end_on_tight_loop:Bool=true,reset:Bool=true)-instance-method","name":"execute","doc":"Runs all instructions\n\nIf `end_on_tight_loop` is `true`, it will not step if the current instruction sets the `program_counter` to itself, creating a tight loop\n\nNOTE: A real 6502 does not end on tight loops, this is only used to ensure that a program doesn't run forever\n\nIf `reset` is true, it will set the `CPU#program_counter` to its original value. If `reset` is false, it simply continues the code\nfrom the last instruction. This is only really matters when `end_on_tight_loop` is true or when using `CPU#stp`\n","summary":"<p>Runs all instructions</p>","abstract":false,"args":[{"name":"end_on_tight_loop","default_value":"true","external_name":"end_on_tight_loop","restriction":"Bool"},{"name":"reset","default_value":"true","external_name":"reset","restriction":"Bool"}],"args_string":"(end_on_tight_loop : Bool = true, reset : Bool = true)","args_html":"(end_on_tight_loop : Bool = <span class=\"n\">true</span>, reset : Bool = <span class=\"n\">true</span>)","location":{"filename":"src/cr6502/6502.cr","line_number":267,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/6502.cr#L267"},"def":{"name":"execute","args":[{"name":"end_on_tight_loop","default_value":"true","external_name":"end_on_tight_loop","restriction":"Bool"},{"name":"reset","default_value":"true","external_name":"reset","restriction":"Bool"}],"visibility":"Public","body":"@stop_exec = false\n@memory.pos = 65532\nif reset\n  @program_counter = @memory.read_bytes(UInt16, IO::ByteFormat::LittleEndian)\nelse\n  @previous_program_counter = -1\nend\nif end_on_tight_loop\n  while (@program_counter != @previous_program_counter) && (!@stop_exec)\n    sleep(((1 / @clock_cycle_mhz) / 1000000) * @instruction_cycles)\n    @previous_program_counter = @program_counter\n    run_instruction\n  end\nelse\n  while !@stop_exec\n    sleep(((1 / @clock_cycle_mhz) / 1000000) * @instruction_cycles)\n    run_instruction\n  end\nend\n"}},{"html_id":"flags:UInt8-instance-method","name":"flags","doc":"The CPU's 7 flag bits","summary":"<p>The CPU's 7 flag bits</p>","abstract":false,"location":{"filename":"src/cr6502/6502.cr","line_number":210,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/6502.cr#L210"},"def":{"name":"flags","return_type":"UInt8","visibility":"Public","body":"@flags"}},{"html_id":"get_flag(flag:Flags):Bool-instance-method","name":"get_flag","doc":"Gets a the value of a bit in `flags`","summary":"<p>Gets a the value of a bit in <code><a href=\"CPU.html#flags%3AUInt8-instance-method\">#flags</a></code></p>","abstract":false,"args":[{"name":"flag","external_name":"flag","restriction":"Flags"}],"args_string":"(flag : Flags) : Bool","args_html":"(flag : <a href=\"CPU/Flags.html\">Flags</a>) : Bool","location":{"filename":"src/cr6502/6502.cr","line_number":315,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/6502.cr#L315"},"def":{"name":"get_flag","args":[{"name":"flag","external_name":"flag","restriction":"Flags"}],"return_type":"Bool","visibility":"Public","body":"case flag\nwhen Flags::Negative\n  if (@flags.bit(7)) == 1\n    return true\n  end\nwhen Flags::Overflow\n  if (@flags.bit(6)) == 1\n    return true\n  end\nwhen Flags::Break\n  if (@flags.bit(4)) == 1\n    return true\n  end\nwhen Flags::DecimalMode\n  if (@flags.bit(3)) == 1\n    return true\n  end\nwhen Flags::InterruptDisable\n  if (@flags.bit(2)) == 1\n    return true\n  end\nwhen Flags::Zero\n  if (@flags.bit(1)) == 1\n    return true\n  end\nwhen Flags::Carry\n  if (@flags.bit(0)) == 1\n    return true\n  end\nend\nreturn false\n"}},{"html_id":"get_ind(address:Int)-instance-method","name":"get_ind","doc":"Gets the Indirect Address of a given address","summary":"<p>Gets the Indirect Address of a given address</p>","abstract":false,"args":[{"name":"address","external_name":"address","restriction":"Int"}],"args_string":"(address : Int)","args_html":"(address : Int)","location":{"filename":"src/cr6502/addressing.cr","line_number":45,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/addressing.cr#L45"},"def":{"name":"get_ind","args":[{"name":"address","external_name":"address","restriction":"Int"}],"visibility":"Public","body":"l = peek(address)\nh = (peek((address(address + 1)) & 255)) << 8\nm = h | l\nreturn m\n"}},{"html_id":"get_indx(address:Int)-instance-method","name":"get_indx","doc":"Gets the Indirect X Address of a given address","summary":"<p>Gets the Indirect X Address of a given address</p>","abstract":false,"args":[{"name":"address","external_name":"address","restriction":"Int"}],"args_string":"(address : Int)","args_html":"(address : Int)","location":{"filename":"src/cr6502/addressing.cr","line_number":53,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/addressing.cr#L53"},"def":{"name":"get_indx","args":[{"name":"address","external_name":"address","restriction":"Int"}],"visibility":"Public","body":"l = peek((address + @x_index) & 255)\nh = (peek(((address + @x_index) + 1) & 255)) << 8\nm = h | l\nreturn m\n"}},{"html_id":"get_indy(address:Int)-instance-method","name":"get_indy","doc":"Gets the Indirect Y Address of a given address","summary":"<p>Gets the Indirect Y Address of a given address</p>","abstract":false,"args":[{"name":"address","external_name":"address","restriction":"Int"}],"args_string":"(address : Int)","args_html":"(address : Int)","location":{"filename":"src/cr6502/addressing.cr","line_number":61,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/addressing.cr#L61"},"def":{"name":"get_indy","args":[{"name":"address","external_name":"address","restriction":"Int"}],"visibility":"Public","body":"l = peek(address)\nh = (peek((address.to_i + 1) & 255)) << 8\nm = ((h | l) + @y_index) & 65535\nreturn m\n"}},{"html_id":"inc(m_value:UInt8,m:UInt16|UInt8)-instance-method","name":"inc","doc":"Increment Memory","summary":"<p>Increment Memory</p>","abstract":false,"args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8"},{"name":"m","external_name":"m","restriction":"UInt16 | UInt8"}],"args_string":"(m_value : UInt8, m : UInt16 | UInt8)","args_html":"(m_value : UInt8, m : UInt16 | UInt8)","location":{"filename":"src/cr6502/instructions/memory_instructions.cr","line_number":46,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/memory_instructions.cr#L46"},"def":{"name":"inc","args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8"},{"name":"m","external_name":"m","restriction":"UInt16 | UInt8"}],"visibility":"Public","body":"poke(m, (m_value + 1) & 255)\nset_flag(Flags::Negative, (m_value.bit(7)) == 1)\nset_flag(Flags::Zero, m_value == 0)\n"}},{"html_id":"inx-instance-method","name":"inx","doc":"Increment X","summary":"<p>Increment X</p>","abstract":false,"location":{"filename":"src/cr6502/instructions/register_instructions.cr","line_number":26,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/register_instructions.cr#L26"},"def":{"name":"inx","visibility":"Public","body":"@x_index = @x_index + 1\nset_flag(Flags::Zero, @x_index == 0)\nset_flag(Flags::Negative, (@x_index.bit(7)) == 1)\n"}},{"html_id":"iny-instance-method","name":"iny","doc":"Increment Y","summary":"<p>Increment Y</p>","abstract":false,"location":{"filename":"src/cr6502/instructions/register_instructions.cr","line_number":54,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/register_instructions.cr#L54"},"def":{"name":"iny","visibility":"Public","body":"@y_index = @y_index + 1\nset_flag(Flags::Zero, @y_index == 0)\nset_flag(Flags::Negative, (@y_index.bit(7)) == 1)\n"}},{"html_id":"jmp(m_value:UInt16)-instance-method","name":"jmp","doc":"Jump\n\nJMP loads the program counter with the absolute address, or the address stored at the memory location of the indirect address. Program execution proceeds from the new program counter value.","summary":"<p>Jump</p>","abstract":false,"args":[{"name":"m_value","external_name":"m_value","restriction":"UInt16"}],"args_string":"(m_value : UInt16)","args_html":"(m_value : UInt16)","location":{"filename":"src/cr6502/instructions/jump_instructions.cr","line_number":5,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/jump_instructions.cr#L5"},"def":{"name":"jmp","args":[{"name":"m_value","external_name":"m_value","restriction":"UInt16"}],"visibility":"Public","body":"@program_counter = m_value"}},{"html_id":"jsr(address:UInt16)-instance-method","name":"jsr","doc":"Jump Saving Return\n\nJSR pushes the address-1 of the next operation to the stack before transferring the value of the argument to the program counter. JSR behaves just like a JMP, but saves the return address to the stack first, thus creating a subroutine.\n\nSubroutines are normally terminated by an `CPU#rts` instruction.","summary":"<p>Jump Saving Return</p>","abstract":false,"args":[{"name":"address","external_name":"address","restriction":"UInt16"}],"args_string":"(address : UInt16)","args_html":"(address : UInt16)","location":{"filename":"src/cr6502/instructions/jump_instructions.cr","line_number":14,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/jump_instructions.cr#L14"},"def":{"name":"jsr","args":[{"name":"address","external_name":"address","restriction":"UInt16"}],"visibility":"Public","body":"t = @program_counter - 1\n@stack_pointer = @stack_pointer - 1\npoke(@stack_pointer.to_i + 256, t)\n@stack_pointer = @stack_pointer - 1\n@program_counter = address.to_u16\n"}},{"html_id":"lda(m_value:UInt8)-instance-method","name":"lda","doc":"Load Accumulator","summary":"<p>Load Accumulator</p>","abstract":false,"args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8"}],"args_string":"(m_value : UInt8)","args_html":"(m_value : UInt8)","location":{"filename":"src/cr6502/instructions/memory_instructions.cr","line_number":3,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/memory_instructions.cr#L3"},"def":{"name":"lda","args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8"}],"visibility":"Public","body":"@accumulator = m_value\nset_flag(Flags::Negative, (@accumulator.bit(7)) == 1)\nset_flag(Flags::Zero, @accumulator == 0)\n"}},{"html_id":"ldx(m_value:UInt8)-instance-method","name":"ldx","doc":"Load X Register","summary":"<p>Load X Register</p>","abstract":false,"args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8"}],"args_string":"(m_value : UInt8)","args_html":"(m_value : UInt8)","location":{"filename":"src/cr6502/instructions/memory_instructions.cr","line_number":10,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/memory_instructions.cr#L10"},"def":{"name":"ldx","args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8"}],"visibility":"Public","body":"@x_index = m_value\nset_flag(Flags::Negative, (@x_index.bit(7)) == 1)\nset_flag(Flags::Zero, @x_index == 0)\n"}},{"html_id":"ldy(m_value:UInt8)-instance-method","name":"ldy","doc":"Load Y Register","summary":"<p>Load Y Register</p>","abstract":false,"args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8"}],"args_string":"(m_value : UInt8)","args_html":"(m_value : UInt8)","location":{"filename":"src/cr6502/instructions/memory_instructions.cr","line_number":17,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/memory_instructions.cr#L17"},"def":{"name":"ldy","args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8"}],"visibility":"Public","body":"@y_index = m_value\nset_flag(Flags::Negative, (@y_index.bit(7)) == 1)\nset_flag(Flags::Zero, @y_index == 0)\n"}},{"html_id":"load_asm(code:String,start_location:UInt16=(peek(RES_LOCATION,true)).to_u16)-instance-method","name":"load_asm","doc":"Loads 6502 assembly instructions\n\nUses ; for comments\n\nWorks with labels `label:`\n\nthe `resvec:` label will set the value at `RES_LOCATION` to the label's memory location\n\nthe `brkvec:` label will set the value at `BRK_LOCATION` to the label's memory location\n\nYou can also manually set the starting location to write the instructions at.\nUseful for appending or editing code","summary":"<p>Loads 6502 assembly instructions</p>","abstract":false,"args":[{"name":"code","external_name":"code","restriction":"String"},{"name":"start_location","default_value":"(peek(RES_LOCATION, true)).to_u16","external_name":"start_location","restriction":"UInt16"}],"args_string":"(code : String, start_location : UInt16 = (peek(RES_LOCATION, true)).to_u16)","args_html":"(code : String, start_location : UInt16 = (peek(<span class=\"t\">RES_LOCATION</span>, <span class=\"n\">true</span>)).to_u16)","location":{"filename":"src/cr6502/parser.cr","line_number":86,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser.cr#L86"},"def":{"name":"load_asm","args":[{"name":"code","external_name":"code","restriction":"String"},{"name":"start_location","default_value":"(peek(RES_LOCATION, true)).to_u16","external_name":"start_location","restriction":"UInt16"}],"visibility":"Public","body":"@program_counter = start_location\ncode.each_line.with_index do |line, line_number|\n  current_index = 0\n  scanner = Scanner.new(line, line_number, @labels)\n  scanner.scan_tokens(true)\n  while !(current_index == (scanner.tokens.size - 1))\n    if scanner.tokens[current_index].type == TokenType::Label\n      label_name = scanner.tokens[current_index].lexeme.rchop\n      if label_name.downcase == \"resvec\"\n        poke(RES_LOCATION, @program_counter)\n      else\n        if label_name.downcase == \"brkvec\"\n          poke(BRK_LOCATION, @program_counter)\n        else\n          label_i = @labels.index do |l|\n            l[0] == label_name\n          end\n          if !label_i\n            @labels << {label_name, 0_u8, false}\n          end\n        end\n      end\n    end\n    current_index = current_index + 1\n  end\nend\n@program_counter = start_location\nnew_label_found = false\ncode.each_line.with_index do |line, line_number|\n  if new_label_found\n    break\n  end\n  current_index = 0\n  scanner = Scanner.new(line, line_number, @labels)\n  scanner.scan_tokens\n  while !(current_index == (scanner.tokens.size - 1))\n    address_mode = nil\n    address : Int32 | UInt16 | UInt8 = -1\n    force_address_16bit = false\n    case scanner.tokens[current_index].type\n    when TokenType::AND\n      parse_address_mode\n      case address_mode\n      when AddressModes::Immediate\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"ANDi\"\n        end[1])\n      when AddressModes::ZeroPage\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"ANDzpg\"\n        end[1])\n      when AddressModes::ZeroPageX\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"ANDzpgx\"\n        end[1])\n      when AddressModes::Absolute\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"ANDabs\"\n        end[1])\n      when AddressModes::AbsoluteX\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"ANDabsx\"\n        end[1])\n      when AddressModes::AbsoluteY\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"ANDabsy\"\n        end[1])\n      when AddressModes::IndirectX\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"ANDindx\"\n        end[1])\n      when AddressModes::IndirectY\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"ANDindy\"\n        end[1])\n      end\n    when TokenType::EOR\n      parse_address_mode\n      case address_mode\n      when AddressModes::Immediate\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"EORi\"\n        end[1])\n      when AddressModes::ZeroPage\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"EORzpg\"\n        end[1])\n      when AddressModes::ZeroPageX\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"EORzpgx\"\n        end[1])\n      when AddressModes::Absolute\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"EORabs\"\n        end[1])\n      when AddressModes::AbsoluteX\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"EORabsx\"\n        end[1])\n      when AddressModes::AbsoluteY\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"EORabsy\"\n        end[1])\n      when AddressModes::IndirectX\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"EORindx\"\n        end[1])\n      when AddressModes::IndirectY\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"EORindy\"\n        end[1])\n      end\n    when TokenType::ORA\n      parse_address_mode\n      case address_mode\n      when AddressModes::Immediate\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"ORAi\"\n        end[1])\n      when AddressModes::ZeroPage\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"ORAzpg\"\n        end[1])\n      when AddressModes::ZeroPageX\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"ORAzpgx\"\n        end[1])\n      when AddressModes::Absolute\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"ORAabs\"\n        end[1])\n      when AddressModes::AbsoluteX\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"ORAabsx\"\n        end[1])\n      when AddressModes::AbsoluteY\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"ORAabsy\"\n        end[1])\n      when AddressModes::IndirectX\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"ORAindx\"\n        end[1])\n      when AddressModes::IndirectY\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"ORAindy\"\n        end[1])\n      end\n    when TokenType::ASL\n      parse_address_mode\n      case address_mode\n      when AddressModes::Accumulator\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"ASLa\"\n        end[1])\n      when AddressModes::ZeroPage\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"ASLzpg\"\n        end[1])\n      when AddressModes::ZeroPageX\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"ASLzpgx\"\n        end[1])\n      when AddressModes::Absolute\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"ASLabs\"\n        end[1])\n      when AddressModes::AbsoluteX\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"ASLabsx\"\n        end[1])\n      end\n    when TokenType::LSR\n      parse_address_mode\n      case address_mode\n      when AddressModes::Accumulator\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"LSRa\"\n        end[1])\n      when AddressModes::ZeroPage\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"LSRzpg\"\n        end[1])\n      when AddressModes::ZeroPageX\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"LSRzpgx\"\n        end[1])\n      when AddressModes::Absolute\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"LSRabs\"\n        end[1])\n      when AddressModes::AbsoluteX\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"LSRabsx\"\n        end[1])\n      end\n    when TokenType::ROL\n      parse_address_mode\n      case address_mode\n      when AddressModes::Accumulator\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"ROLa\"\n        end[1])\n      when AddressModes::ZeroPage\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"ROLzpg\"\n        end[1])\n      when AddressModes::ZeroPageX\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"ROLzpgx\"\n        end[1])\n      when AddressModes::Absolute\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"ROLabs\"\n        end[1])\n      when AddressModes::AbsoluteX\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"ROLabsx\"\n        end[1])\n      end\n    when TokenType::ROR\n      parse_address_mode\n      case address_mode\n      when AddressModes::Accumulator\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"RORa\"\n        end[1])\n      when AddressModes::ZeroPage\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"RORzpg\"\n        end[1])\n      when AddressModes::ZeroPageX\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"RORzpgx\"\n        end[1])\n      when AddressModes::Absolute\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"RORabs\"\n        end[1])\n      when AddressModes::AbsoluteX\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"RORabsx\"\n        end[1])\n      end\n    when TokenType::BPL\n      current_index = current_index + 1\n      if x = @labels.index do |l|\n        l[0] == scanner.tokens[current_index].lexeme\n      end\n        address = @labels[x][1].to_u16\n        force_address_16bit = true\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"BPLlabel\"\n        end[1])\n      else\n        parse_address\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"BPL\"\n        end[1])\n      end\n    when TokenType::BVC\n      current_index = current_index + 1\n      if x = @labels.index do |l|\n        l[0] == scanner.tokens[current_index].lexeme\n      end\n        address = @labels[x][1].to_u16\n        force_address_16bit = true\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"BCXlabel\"\n        end[1])\n      else\n        parse_address\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"BCX\"\n        end[1])\n      end\n    when TokenType::BCC\n      current_index = current_index + 1\n      if x = @labels.index do |l|\n        l[0] == scanner.tokens[current_index].lexeme\n      end\n        address = @labels[x][1].to_u16\n        force_address_16bit = true\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"BCClabel\"\n        end[1])\n      else\n        parse_address\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"BCC\"\n        end[1])\n      end\n    when TokenType::BNE\n      current_index = current_index + 1\n      if x = @labels.index do |l|\n        l[0] == scanner.tokens[current_index].lexeme\n      end\n        address = @labels[x][1].to_u16\n        force_address_16bit = true\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"BNElabel\"\n        end[1])\n      else\n        parse_address\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"BNE\"\n        end[1])\n      end\n    when TokenType::BMI\n      current_index = current_index + 1\n      if x = @labels.index do |l|\n        l[0] == scanner.tokens[current_index].lexeme\n      end\n        address = @labels[x][1].to_u16\n        force_address_16bit = true\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"BMIlabel\"\n        end[1])\n      else\n        parse_address\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"BMI\"\n        end[1])\n      end\n    when TokenType::BVS\n      current_index = current_index + 1\n      if x = @labels.index do |l|\n        l[0] == scanner.tokens[current_index].lexeme\n      end\n        address = @labels[x][1].to_u16\n        force_address_16bit = true\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"BVSlabel\"\n        end[1])\n      else\n        parse_address\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"BVS\"\n        end[1])\n      end\n    when TokenType::BCS\n      current_index = current_index + 1\n      if x = @labels.index do |l|\n        l[0] == scanner.tokens[current_index].lexeme\n      end\n        address = @labels[x][1].to_u16\n        force_address_16bit = true\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"BCSlabel\"\n        end[1])\n      else\n        parse_address\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"BCS\"\n        end[1])\n      end\n    when TokenType::BEQ\n      current_index = current_index + 1\n      if x = @labels.index do |l|\n        l[0] == scanner.tokens[current_index].lexeme\n      end\n        address = @labels[x][1].to_u16\n        force_address_16bit = true\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"BEQlabel\"\n        end[1])\n      else\n        parse_address\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"BEQ\"\n        end[1])\n      end\n    when TokenType::CMP\n      parse_address_mode\n      case address_mode\n      when AddressModes::Immediate\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"CMPi\"\n        end[1])\n      when AddressModes::ZeroPage\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"CMPzpg\"\n        end[1])\n      when AddressModes::ZeroPageX\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"CMPzpgx\"\n        end[1])\n      when AddressModes::Absolute\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"CMPabs\"\n        end[1])\n      when AddressModes::AbsoluteX\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"CMPabsx\"\n        end[1])\n      when AddressModes::AbsoluteY\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"CMPabsy\"\n        end[1])\n      when AddressModes::IndirectX\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"CMPindx\"\n        end[1])\n      when AddressModes::IndirectY\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"CMPindy\"\n        end[1])\n      end\n    when TokenType::CPX\n      parse_address_mode\n      case address_mode\n      when AddressModes::Immediate\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"CPXi\"\n        end[1])\n      when AddressModes::ZeroPage\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"CPXzpg\"\n        end[1])\n      when AddressModes::Absolute\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"CPXabs\"\n        end[1])\n      end\n    when TokenType::CPY\n      parse_address_mode\n      case address_mode\n      when AddressModes::Immediate\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"CPYi\"\n        end[1])\n      when AddressModes::ZeroPage\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"CPYzpg\"\n        end[1])\n      when AddressModes::Absolute\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"CPYabs\"\n        end[1])\n      end\n    when TokenType::BIT\n      parse_address_mode\n      case address_mode\n      when AddressModes::ZeroPage\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"BITzpg\"\n        end[1])\n      when AddressModes::Absolute\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"BITabs\"\n        end[1])\n      end\n    when TokenType::CLC\n      add_instruction(INSTRUCTIONS.find! do |i|\n        i[0] == \"CLC\"\n      end[1])\n    when TokenType::SEC\n      add_instruction(INSTRUCTIONS.find! do |i|\n        i[0] == \"SEC\"\n      end[1])\n    when TokenType::CLI\n      add_instruction(INSTRUCTIONS.find! do |i|\n        i[0] == \"CLI\"\n      end[1])\n    when TokenType::SEI\n      add_instruction(INSTRUCTIONS.find! do |i|\n        i[0] == \"SEI\"\n      end[1])\n    when TokenType::CLD\n      add_instruction(INSTRUCTIONS.find! do |i|\n        i[0] == \"CLD\"\n      end[1])\n    when TokenType::SED\n      add_instruction(INSTRUCTIONS.find! do |i|\n        i[0] == \"SED\"\n      end[1])\n    when TokenType::CLV\n      add_instruction(INSTRUCTIONS.find! do |i|\n        i[0] == \"CLV\"\n      end[1])\n    when TokenType::JMP\n      parse_address_mode\n      case address_mode\n      when AddressModes::Absolute\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"JMPabs\"\n        end[1])\n      when AddressModes::Indirect\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"JMPind\"\n        end[1])\n      end\n    when TokenType::JSR\n      current_index = current_index + 1\n      parse_address\n      add_instruction(INSTRUCTIONS.find! do |i|\n        i[0] == \"JSR\"\n      end[1])\n    when TokenType::RTS\n      add_instruction(INSTRUCTIONS.find! do |i|\n        i[0] == \"RTS\"\n      end[1])\n    when TokenType::RTI\n      add_instruction(INSTRUCTIONS.find! do |i|\n        i[0] == \"RTI\"\n      end[1])\n    when TokenType::ADC\n      parse_address_mode\n      case address_mode\n      when AddressModes::Immediate\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"ADCi\"\n        end[1])\n      when AddressModes::ZeroPage\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"ADCzpg\"\n        end[1])\n      when AddressModes::ZeroPageX\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"ADCzpgx\"\n        end[1])\n      when AddressModes::Absolute\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"ADCabs\"\n        end[1])\n      when AddressModes::AbsoluteX\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"ADCabsx\"\n        end[1])\n      when AddressModes::AbsoluteY\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"ADCabsy\"\n        end[1])\n      when AddressModes::IndirectX\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"ADCindx\"\n        end[1])\n      when AddressModes::IndirectY\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"ADCindy\"\n        end[1])\n      end\n    when TokenType::SBC\n      parse_address_mode\n      case address_mode\n      when AddressModes::Immediate\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"SBCi\"\n        end[1])\n      when AddressModes::ZeroPage\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"SBCzpg\"\n        end[1])\n      when AddressModes::ZeroPageX\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"SBCzpgx\"\n        end[1])\n      when AddressModes::Absolute\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"SBCabs\"\n        end[1])\n      when AddressModes::AbsoluteX\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"SBCabsx\"\n        end[1])\n      when AddressModes::AbsoluteY\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"SBCabsy\"\n        end[1])\n      when AddressModes::IndirectX\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"SBCindx\"\n        end[1])\n      when AddressModes::IndirectY\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"SBCindy\"\n        end[1])\n      end\n    when TokenType::LDA\n      parse_address_mode\n      case address_mode\n      when AddressModes::Immediate\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"LDAi\"\n        end[1])\n      when AddressModes::ZeroPage\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"LDAzpg\"\n        end[1])\n      when AddressModes::ZeroPageX\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"LDAzpgx\"\n        end[1])\n      when AddressModes::Absolute\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"LDAabs\"\n        end[1])\n      when AddressModes::AbsoluteX\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"LDAabsx\"\n        end[1])\n      when AddressModes::AbsoluteY\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"LDAabsy\"\n        end[1])\n      when AddressModes::IndirectX\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"LDAindx\"\n        end[1])\n      when AddressModes::IndirectY\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"LDAindy\"\n        end[1])\n      end\n    when TokenType::LDX\n      parse_address_mode\n      case address_mode\n      when AddressModes::Immediate\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"LDXi\"\n        end[1])\n      when AddressModes::ZeroPage\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"LDXzpg\"\n        end[1])\n      when AddressModes::ZeroPageY\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"LDXzpgy\"\n        end[1])\n      when AddressModes::Absolute\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"LDXabs\"\n        end[1])\n      when AddressModes::AbsoluteY\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"LDXabsy\"\n        end[1])\n      end\n    when TokenType::LDY\n      parse_address_mode\n      case address_mode\n      when AddressModes::Immediate\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"LDYi\"\n        end[1])\n      when AddressModes::ZeroPage\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"LDYzpg\"\n        end[1])\n      when AddressModes::ZeroPageX\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"LDYzpgx\"\n        end[1])\n      when AddressModes::Absolute\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"LDYabs\"\n        end[1])\n      when AddressModes::AbsoluteX\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"LDYabsx\"\n        end[1])\n      end\n    when TokenType::DEC\n      parse_address_mode\n      case address_mode\n      when AddressModes::ZeroPage\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"DECzpg\"\n        end[1])\n      when AddressModes::ZeroPageX\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"DECzpgx\"\n        end[1])\n      when AddressModes::Absolute\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"DECabs\"\n        end[1])\n      when AddressModes::AbsoluteX\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"DECabsx\"\n        end[1])\n      end\n    when TokenType::STA\n      parse_address_mode\n      case address_mode\n      when AddressModes::ZeroPage\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"STAzpg\"\n        end[1])\n      when AddressModes::ZeroPageX\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"STAzpgx\"\n        end[1])\n      when AddressModes::Absolute\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"STAabs\"\n        end[1])\n      when AddressModes::AbsoluteX\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"STAabsx\"\n        end[1])\n      when AddressModes::AbsoluteY\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"STAabsy\"\n        end[1])\n      when AddressModes::IndirectX\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"STAindx\"\n        end[1])\n      when AddressModes::IndirectY\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"STAindy\"\n        end[1])\n      end\n    when TokenType::STX\n      parse_address_mode\n      case address_mode\n      when AddressModes::ZeroPage\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"STXzpg\"\n        end[1])\n      when AddressModes::ZeroPageY\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"STXzpgy\"\n        end[1])\n      when AddressModes::Absolute\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"STXabs\"\n        end[1])\n      end\n    when TokenType::STY\n      parse_address_mode\n      case address_mode\n      when AddressModes::ZeroPage\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"STYzpg\"\n        end[1])\n      when AddressModes::ZeroPageX\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"STYzpgx\"\n        end[1])\n      when AddressModes::Absolute\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"STYabs\"\n        end[1])\n      end\n    when TokenType::INC\n      parse_address_mode\n      case address_mode\n      when AddressModes::ZeroPage\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"INCzpg\"\n        end[1])\n      when AddressModes::ZeroPageX\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"INCzpgx\"\n        end[1])\n      when AddressModes::Absolute\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"INCabs\"\n        end[1])\n      when AddressModes::AbsoluteX\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"INCabsx\"\n        end[1])\n      end\n    when TokenType::TAX\n      add_instruction(INSTRUCTIONS.find! do |i|\n        i[0] == \"TAX\"\n      end[1])\n    when TokenType::TXA\n      add_instruction(INSTRUCTIONS.find! do |i|\n        i[0] == \"TXA\"\n      end[1])\n    when TokenType::DEX\n      add_instruction(INSTRUCTIONS.find! do |i|\n        i[0] == \"DEX\"\n      end[1])\n    when TokenType::INX\n      add_instruction(INSTRUCTIONS.find! do |i|\n        i[0] == \"INX\"\n      end[1])\n    when TokenType::TAY\n      add_instruction(INSTRUCTIONS.find! do |i|\n        i[0] == \"TAY\"\n      end[1])\n    when TokenType::TYA\n      add_instruction(INSTRUCTIONS.find! do |i|\n        i[0] == \"TYA\"\n      end[1])\n    when TokenType::DEY\n      add_instruction(INSTRUCTIONS.find! do |i|\n        i[0] == \"DEY\"\n      end[1])\n    when TokenType::INY\n      add_instruction(INSTRUCTIONS.find! do |i|\n        i[0] == \"INY\"\n      end[1])\n    when TokenType::PHA\n      add_instruction(INSTRUCTIONS.find! do |i|\n        i[0] == \"PHA\"\n      end[1])\n    when TokenType::PHP\n      add_instruction(INSTRUCTIONS.find! do |i|\n        i[0] == \"PHP\"\n      end[1])\n    when TokenType::TSX\n      add_instruction(INSTRUCTIONS.find! do |i|\n        i[0] == \"TSX\"\n      end[1])\n    when TokenType::PLA\n      add_instruction(INSTRUCTIONS.find! do |i|\n        i[0] == \"PLA\"\n      end[1])\n    when TokenType::PLP\n      add_instruction(INSTRUCTIONS.find! do |i|\n        i[0] == \"PLP\"\n      end[1])\n    when TokenType::TXS\n      add_instruction(INSTRUCTIONS.find! do |i|\n        i[0] == \"TXS\"\n      end[1])\n    when TokenType::BRK\n      add_instruction(INSTRUCTIONS.find! do |i|\n        i[0] == \"BRK\"\n      end[1])\n    when TokenType::NOP\n      add_instruction(INSTRUCTIONS.find! do |i|\n        i[0] == \"NOP\"\n      end[1])\n    when TokenType::PRT\n      parse_address_mode\n      if address <= 255\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"PRTzpg\"\n        end[1])\n      else\n        add_instruction(INSTRUCTIONS.find! do |i|\n          i[0] == \"PRTabs\"\n        end[1])\n      end\n    when TokenType::LOG\n      add_instruction(INSTRUCTIONS.find! do |i|\n        i[0] == \"LOG\"\n      end[1])\n    when TokenType::STP\n      add_instruction(INSTRUCTIONS.find! do |i|\n        i[0] == \"STP\"\n      end[1])\n    when TokenType::Label\n    else\n      raise(ScannerException.new(\"Invalid command \\\"#{line}\\\" on line ##{line_number}\"))\n    end\n    @labels.each.with_index do |label, i|\n      if (\"#{label[0]}:\" == scanner.tokens[current_index].lexeme) && (!label[2])\n        @labels[i] = {scanner.tokens[current_index].lexeme.rchop, @program_counter, true}\n        new_label_found = true\n      end\n    end\n    if address >= 0\n      if force_address_16bit\n        poke(@program_counter, address.to_u16)\n        @program_counter = @program_counter + 2\n      else\n        if address <= 255\n          poke(@program_counter, address.to_u8)\n          @program_counter = @program_counter + 1\n        else\n          poke(@program_counter, address.to_u16)\n          @program_counter = @program_counter + 2\n        end\n      end\n    end\n    current_index = current_index + 1\n  end\nend\nif new_label_found\n  load_asm(code, start_location)\nend\n@program_counter = (peek(RES_LOCATION, true)).to_u16\n"}},{"html_id":"log-instance-method","name":"log","doc":"Prints out information about the CPU in its current state","summary":"<p>Prints out information about the CPU in its current state</p>","abstract":false,"location":{"filename":"src/cr6502/instructions/custom_instructions.cr","line_number":22,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/custom_instructions.cr#L22"},"def":{"name":"log","visibility":"Public","body":"next_instruction = INSTRUCTIONS.find! do |i|\n  i[1] == (peek(@program_counter))\nend\nbv_instruction = INSTRUCTIONS.find! do |i|\n  i[1] == (peek(peek(BRK_LOCATION, true)))\nend\nputs(\"\\n    --- CPU LOG ---\\n    Accumulator         = #{@accumulator}\\n    X                   = #{@x_index}\\n    Y                   = #{@y_index}\\n    Stack Pointer       = 0x#{@stack_pointer.to_s(16, precision: 2)}   | #{@stack_pointer}\\n    Program Counter     = 0x#{@program_counter.to_s(16, precision: 4)} | #{@program_counter}\\n\\n    Flags\\n    NV-BDIZC\\n    #{@flags.to_s(2, precision: 8)}\\n\\n    Clock Cycle         = #{@clock_cycle_mhz}mhz\\n    Reset Vector        = 0x#{(peek(RES_LOCATION, true)).to_s(16, precision: 4)} | #{peek(RES_LOCATION, true)}\\n    Break Vector        = 0x#{(peek(BRK_LOCATION, true)).to_s(16, precision: 4)} | #{peek(BRK_LOCATION, true)}\\n    Instruction at BV   = Name: \\\"#{bv_instruction[0]}\\\" | Opcode: 0x#{bv_instruction[1].to_s(16, precision: 2)} | Cycle Length: #{bv_instruction[2]}\\n\\n    Log Location        = 0x#{(@program_counter - 1).to_s(16, precision: 4)} | #{@program_counter - 1}\\n    Next Instruction    = Name: \\\"#{next_instruction[0]}\\\" | Opcode: 0x#{next_instruction[1].to_s(16, precision: 2)} | Cycle Length: #{next_instruction[2]}\\n    --- CPU LOG ---\\n    \")\n"}},{"html_id":"lsr(m_value:UInt8,m:UInt16|UInt8,accumulator:Bool=false)-instance-method","name":"lsr","doc":"Logical Shift Right\n\nLSR shifts all bits right one position.\n0 is shifted into bit 7 and the original bit 0 is shifted into the Carry.","summary":"<p>Logical Shift Right</p>","abstract":false,"args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8"},{"name":"m","external_name":"m","restriction":"UInt16 | UInt8"},{"name":"accumulator","default_value":"false","external_name":"accumulator","restriction":"Bool"}],"args_string":"(m_value : UInt8, m : UInt16 | UInt8, accumulator : Bool = false)","args_html":"(m_value : UInt8, m : UInt16 | UInt8, accumulator : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/cr6502/instructions/bitwise_instructions.cr","line_number":42,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/bitwise_instructions.cr#L42"},"def":{"name":"lsr","args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8"},{"name":"m","external_name":"m","restriction":"UInt16 | UInt8"},{"name":"accumulator","default_value":"false","external_name":"accumulator","restriction":"Bool"}],"visibility":"Public","body":"set_flag(Flags::Negative, false)\nset_flag(Flags::Carry, (m_value.bit(0)) == 1)\nif accumulator\n  @accumulator = ((m_value >> 1) & 127)\nelse\n  poke(m, (  (m_value >> 1) & 127))\nend\nset_flag(Flags::Zero, m_value == 0)\n"}},{"html_id":"memory:IO::Memory-instance-method","name":"memory","doc":"The 64kb (65536 bytes) of accessible memory","summary":"<p>The 64kb (65536 bytes) of accessible memory</p>","abstract":false,"location":{"filename":"src/cr6502/6502.cr","line_number":188,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/6502.cr#L188"},"def":{"name":"memory","return_type":"IO::Memory","visibility":"Public","body":"@memory"}},{"html_id":"nop-instance-method","name":"nop","doc":"No Operation\n\nA NOP takes 2 machine cycles to execute, but it has no effect on any register, memory location, or processor flag. Thus, it takes up time and space but performs no operation.\n\nNOP can be used to reserve space for future modifications or to remove existing code without changing the memory locations of code that follows it.\n\nNOP can also be used in tightly timed code, to idly take up 2 cycles without having any other side effects.","summary":"<p>No Operation</p>","abstract":false,"location":{"filename":"src/cr6502/instructions/other_instructions.cr","line_number":24,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/other_instructions.cr#L24"},"def":{"name":"nop","visibility":"Public","body":""}},{"html_id":"ora(m_value:UInt8)-instance-method","name":"ora","doc":"Bitwise OR with Accumulator","summary":"<p>Bitwise OR with Accumulator</p>","abstract":false,"args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8"}],"args_string":"(m_value : UInt8)","args_html":"(m_value : UInt8)","location":{"filename":"src/cr6502/instructions/bitwise_instructions.cr","line_number":17,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/bitwise_instructions.cr#L17"},"def":{"name":"ora","args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8"}],"visibility":"Public","body":"@accumulator = @accumulator | m_value\nset_flag(Flags::Negative, (@accumulator.bit(7)) == 1)\nset_flag(Flags::Zero, @accumulator == 0)\n"}},{"html_id":"peek(mem_location:Int,two_byte:Bool=false)-instance-method","name":"peek","doc":"Reads a value from memory. Will read as a `UInt16` if `two_byte` is `true`","summary":"<p>Reads a value from memory.</p>","abstract":false,"args":[{"name":"mem_location","external_name":"mem_location","restriction":"Int"},{"name":"two_byte","default_value":"false","external_name":"two_byte","restriction":"Bool"}],"args_string":"(mem_location : Int, two_byte : Bool = false)","args_html":"(mem_location : Int, two_byte : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/cr6502/6502.cr","line_number":309,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/6502.cr#L309"},"def":{"name":"peek","args":[{"name":"mem_location","external_name":"mem_location","restriction":"Int"},{"name":"two_byte","default_value":"false","external_name":"two_byte","restriction":"Bool"}],"visibility":"Public","body":"@memory.pos = mem_location\nreturn two_byte ? @memory.read_bytes(UInt16, IO::ByteFormat::LittleEndian) : @memory.read_bytes(UInt8, IO::ByteFormat::LittleEndian)\n"}},{"html_id":"pha-instance-method","name":"pha","doc":"\tPush Accumulator","summary":"<p>Push Accumulator</p>","abstract":false,"location":{"filename":"src/cr6502/instructions/stack_instructions.cr","line_number":7,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/stack_instructions.cr#L7"},"def":{"name":"pha","visibility":"Public","body":"poke(@stack_pointer.to_i + 256, @accumulator)\n@stack_pointer = @stack_pointer - 1\n"}},{"html_id":"php-instance-method","name":"php","doc":"Push Processor Status (`CPU#flags`)","summary":"<p>Push Processor Status (<code><a href=\"CPU.html#flags%3AUInt8-instance-method\">CPU#flags</a></code>)</p>","abstract":false,"location":{"filename":"src/cr6502/instructions/stack_instructions.cr","line_number":13,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/stack_instructions.cr#L13"},"def":{"name":"php","visibility":"Public","body":"poke(@stack_pointer.to_i + 256, @flags)\n@stack_pointer = @stack_pointer - 1\n"}},{"html_id":"pla-instance-method","name":"pla","doc":"Pull Accumulator","summary":"<p>Pull Accumulator</p>","abstract":false,"location":{"filename":"src/cr6502/instructions/stack_instructions.cr","line_number":26,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/stack_instructions.cr#L26"},"def":{"name":"pla","visibility":"Public","body":"@stack_pointer = @stack_pointer + 1\n@accumulator = (peek(@stack_pointer.to_i + 256)).to_u8\nset_flag(Flags::Negative, (@accumulator.bit(7)) == 1)\nset_flag(Flags::Zero, @accumulator == 0)\n"}},{"html_id":"plp-instance-method","name":"plp","doc":"Pull Processor Status","summary":"<p>Pull Processor Status</p>","abstract":false,"location":{"filename":"src/cr6502/instructions/stack_instructions.cr","line_number":34,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/stack_instructions.cr#L34"},"def":{"name":"plp","visibility":"Public","body":"@stack_pointer = @stack_pointer + 1\n@flags = (peek(@stack_pointer.to_i + 256)).to_u8\n"}},{"html_id":"poke(mem_location:Int,data:UInt8|UInt16)-instance-method","name":"poke","doc":"Pokes a value into a location in memory","summary":"<p>Pokes a value into a location in memory</p>","abstract":false,"args":[{"name":"mem_location","external_name":"mem_location","restriction":"Int"},{"name":"data","external_name":"data","restriction":"UInt8 | UInt16"}],"args_string":"(mem_location : Int, data : UInt8 | UInt16)","args_html":"(mem_location : Int, data : UInt8 | UInt16)","location":{"filename":"src/cr6502/6502.cr","line_number":303,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/6502.cr#L303"},"def":{"name":"poke","args":[{"name":"mem_location","external_name":"mem_location","restriction":"Int"},{"name":"data","external_name":"data","restriction":"UInt8 | UInt16"}],"visibility":"Public","body":"@memory.pos = mem_location\n@memory.write_bytes(data, IO::ByteFormat::LittleEndian)\n"}},{"html_id":"print_memory(start_pos:Int=0,length:Int=65536)-instance-method","name":"print_memory","doc":"Prints out the current memory.\n\nPrints out 16 bytes per line. Therefore `print_memory(0x0F4, 1)` will print `0x0F40` through `0x0F4F`","summary":"<p>Prints out the current memory.</p>","abstract":false,"args":[{"name":"start_pos","default_value":"0","external_name":"start_pos","restriction":"Int"},{"name":"length","default_value":"65536","external_name":"length","restriction":"Int"}],"args_string":"(start_pos : Int = 0, length : Int = 65536)","args_html":"(start_pos : Int = <span class=\"n\">0</span>, length : Int = <span class=\"n\">65536</span>)","location":{"filename":"src/cr6502/6502.cr","line_number":378,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/6502.cr#L378"},"def":{"name":"print_memory","args":[{"name":"start_pos","default_value":"0","external_name":"start_pos","restriction":"Int"},{"name":"length","default_value":"65536","external_name":"length","restriction":"Int"}],"visibility":"Public","body":"if start_pos > 65535\n  raise(Exception.new(\"'start_pos' is greater than 65535 which is the maximum amount of memory\"))\nelse\n  if (start_pos + length) > 65536\n    raise(Exception.new(\"'length' goes past end of memory. 'start_pos' + 'length' = #{start_pos + length} which is greater than 65536\"))\n  else\n    @memory.pos = 0\n    slice = Bytes.new(65536)\n    @memory.read(slice)\n    slice.hexdump[start_pos + (start_pos * 76), length * 76].each_line do |line|\n      puts(line[4..-1])\n    end\n  end\nend"}},{"html_id":"program_counter:UInt16-instance-method","name":"program_counter","doc":"The 16-bit program counter which points to the next instruction in memory to execute.\n\nGets set after a command is read, but before it is executed.\n\nMeaning it points to the next instruction to execute, not the one that is currently executing","summary":"<p>The 16-bit program counter which points to the next instruction in memory to execute.</p>","abstract":false,"location":{"filename":"src/cr6502/6502.cr","line_number":204,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/6502.cr#L204"},"def":{"name":"program_counter","return_type":"UInt16","visibility":"Public","body":"@program_counter"}},{"html_id":"prt(value_to_print:UInt8|UInt16)-instance-method","name":"prt","doc":"Print a 8-bit or 16-bit value. Mainly used with string interpolation\n\nExample:\n\n```\ncpu = CPU.new\n\ncpu.load_asm(\"\nprt #{cpu.stack_pointer}\n\")\n\ncpu.execute # => puts \"Type: UInt8 | Hex: ff | Decimal 255 | Binary: 11111111\"\n```","summary":"<p>Print a 8-bit or 16-bit value.</p>","abstract":false,"args":[{"name":"value_to_print","external_name":"value_to_print","restriction":"UInt8 | UInt16"}],"args_string":"(value_to_print : UInt8 | UInt16)","args_html":"(value_to_print : UInt8 | UInt16)","location":{"filename":"src/cr6502/instructions/custom_instructions.cr","line_number":15,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/custom_instructions.cr#L15"},"def":{"name":"prt","args":[{"name":"value_to_print","external_name":"value_to_print","restriction":"UInt8 | UInt16"}],"visibility":"Public","body":"puts(\"Type: #{typeof(value_to_print)} | Hex: 0x#{value_to_print.to_s(16, precision: ((typeof(value_to_print)) == UInt8 ? 2 : 4))} | Decimal: #{value_to_print} | Binary: 0b#{value_to_print.to_s(2)}\")"}},{"html_id":"rol(m_value:UInt8,m:UInt16|UInt8,accumulator:Bool=false)-instance-method","name":"rol","doc":"Rotate Left\n\nROL shifts all bits left one position.\nThe Carry is shifted into bit 0 and the original bit 7 is shifted into the Carry.","summary":"<p>Rotate Left</p>","abstract":false,"args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8"},{"name":"m","external_name":"m","restriction":"UInt16 | UInt8"},{"name":"accumulator","default_value":"false","external_name":"accumulator","restriction":"Bool"}],"args_string":"(m_value : UInt8, m : UInt16 | UInt8, accumulator : Bool = false)","args_html":"(m_value : UInt8, m : UInt16 | UInt8, accumulator : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/cr6502/instructions/bitwise_instructions.cr","line_number":59,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/bitwise_instructions.cr#L59"},"def":{"name":"rol","args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8"},{"name":"m","external_name":"m","restriction":"UInt16 | UInt8"},{"name":"accumulator","default_value":"false","external_name":"accumulator","restriction":"Bool"}],"visibility":"Public","body":"t = m_value.bit(7)\nif accumulator\n  @accumulator = (@accumulator << 1) & 254\n  @accumulator = @accumulator | (get_flag(Flags::Carry)).to_unsafe\nelse\n  poke(m, (m_value << 1) & 254)\n  poke(m, m_value | (get_flag(Flags::Carry)).to_unsafe)\nend\nset_flag(Flags::Carry, t == 1)\nset_flag(Flags::Zero, m_value == 0)\nset_flag(Flags::Negative, (m_value.bit(7)) == 1)\n"}},{"html_id":"ror(m_value:UInt8,m:UInt16|UInt8,accumulator:Bool=false)-instance-method","name":"ror","doc":"Rotate Right\n\nROR shifts all bits right one position.\nThe Carry is shifted into bit 7 and the original bit 0 is shifted into the Carry.","summary":"<p>Rotate Right</p>","abstract":false,"args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8"},{"name":"m","external_name":"m","restriction":"UInt16 | UInt8"},{"name":"accumulator","default_value":"false","external_name":"accumulator","restriction":"Bool"}],"args_string":"(m_value : UInt8, m : UInt16 | UInt8, accumulator : Bool = false)","args_html":"(m_value : UInt8, m : UInt16 | UInt8, accumulator : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/cr6502/instructions/bitwise_instructions.cr","line_number":79,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/bitwise_instructions.cr#L79"},"def":{"name":"ror","args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8"},{"name":"m","external_name":"m","restriction":"UInt16 | UInt8"},{"name":"accumulator","default_value":"false","external_name":"accumulator","restriction":"Bool"}],"visibility":"Public","body":"t = (m_value.bit(0)) == 1\n@accumulator = (m_value >> 1) & 127\n@accumulator = m_value | (get_flag(Flags::Carry) ? 128 : 0)\nif accumulator\nelse\n  poke(m, (m_value >> 1) & 127)\n  poke(m, m_value | (get_flag(Flags::Carry) ? 128 : 0))\nend\nset_flag(Flags::Carry, t)\nset_flag(Flags::Zero, m_value == 0)\nset_flag(Flags::Negative, (m_value.bit(7)) == 1)\n"}},{"html_id":"rti-instance-method","name":"rti","doc":"Return from Interrupt\n\nRTI retrieves the Processor Status byte and Program Counter from the stack in that order. Interrupts push the program counter first and then the processor status.\n\nUnlike RTS, the return address on the stack is the actual address rather than the address-1.","summary":"<p>Return from Interrupt</p>","abstract":false,"location":{"filename":"src/cr6502/instructions/jump_instructions.cr","line_number":38,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/jump_instructions.cr#L38"},"def":{"name":"rti","visibility":"Public","body":"@stack_pointer = @stack_pointer + 1\n@flags = (peek(@stack_pointer.to_i + 256)).to_u8\n@stack_pointer = @stack_pointer + 1\n@program_counter = (peek(@stack_pointer.to_i + 256, true)).to_u16\n@stack_pointer = @stack_pointer + 1\n"}},{"html_id":"rts-instance-method","name":"rts","doc":"Return to Saved\n\nRTS pulls the top two bytes off the stack (low byte first) and transfers them to the program counter. The program counter is incremented by one and then execution proceeds from there.\n\nRTS is typically used in combination with a `CPU#jsr` which saves the return address-1 to the stack.","summary":"<p>Return to Saved</p>","abstract":false,"location":{"filename":"src/cr6502/instructions/jump_instructions.cr","line_number":27,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/jump_instructions.cr#L27"},"def":{"name":"rts","visibility":"Public","body":"@stack_pointer = @stack_pointer + 1\n@program_counter = (peek(@stack_pointer, true)).to_u16 + 1\n@stack_pointer = @stack_pointer + 1\n"}},{"html_id":"run_instruction-instance-method","name":"run_instruction","doc":"Runs the current value of `CPU#program_counter`'s location in memory as an instruction","summary":"<p>Runs the current value of <code><a href=\"CPU.html#program_counter%3AUInt16-instance-method\">CPU#program_counter</a></code>'s location in memory as an instruction</p>","abstract":false,"location":{"filename":"src/cr6502/instructions.cr","line_number":192,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions.cr#L192"},"def":{"name":"run_instruction","visibility":"Public","body":"instruction = peek(@program_counter)\n@program_counter = @program_counter + 1_u16\nINSTRUCTIONS.each do |i|\n  if i[1] == instruction\n    @instruction_cycles = @instruction_cycles + i[2]\n    address = peek(@program_counter)\n    if i[0].includes?(\"indy\")\n      @instruction_cycles = @instruction_cycles + (((@program_counter - ((@program_counter // 255) * 255)) + (get_indy(address))) > 255 ? 1 : 0)\n    end\n    if i[0].includes?(\"absy\")\n      @instruction_cycles = @instruction_cycles + (((@program_counter - ((@program_counter // 255) * 255)) + ((address + @y_index) & 65535)) > 255 ? 1 : 0)\n      address = peek(@program_counter, true)\n      @program_counter = @program_counter + 2\n    else\n      if i[0].includes?(\"absx\")\n        @instruction_cycles = @instruction_cycles + (((@program_counter - ((@program_counter // 255) * 255)) + ((address + @x_index) & 65535)) > 255 ? 1 : 0)\n        address = peek(@program_counter, true)\n        @program_counter = @program_counter + 2\n      else\n        if (((i[0].includes?(\"abs\")) || (i[0].includes?(\"JSR\"))) || (i[0].includes?(\"JMPind\"))) || (i[0].includes?(\"label\"))\n          address = peek(@program_counter, true)\n          @program_counter = @program_counter + 2\n        else\n          if i[0].size > 3\n            @program_counter = @program_counter + 1\n          end\n        end\n      end\n    end\n    case i[0]\n    when \"BRK\"\n      brk\n    when \"ORAindx\"\n      ora((peek(get_indx(address))).to_u8)\n    when \"ORAzpg\"\n      ora((peek(address)).to_u8)\n    when \"ASLzpg\"\n      asl((peek(address)).to_u8, address)\n    when \"PHP\"\n      php()\n    when \"ORAi\"\n      ora(address.to_u8)\n    when \"ASLa\"\n      asl(@accumulator, @accumulator, true)\n    when \"ORAabs\"\n      ora((peek(address)).to_u8)\n    when \"BPL\"\n      bpl(address.to_u8)\n    when \"ORAindy\"\n      ora((peek(get_indy(address))).to_u8)\n    when \"ORAzpgx\"\n      ora((peek((address + @x_index) & 255)).to_u8)\n    when \"ASLzpgx\"\n      asl((peek((address + @x_index) & 255)).to_u8, (      (address + @x_index) & 255))\n    when \"CLC\"\n      clc()\n    when \"ORAabsy\"\n      ora((peek((address + @y_index) & 65535)).to_u8)\n    when \"ORAabsx\"\n      ora((peek((address + @x_index) & 65535)).to_u8)\n    when \"ASLabsx\"\n      asl((peek((address + @x_index) & 65535)).to_u8, (      (address + @x_index) & 65535))\n    when \"JSR\"\n      jsr(address.to_u16)\n    when \"ANDindx\"\n      and((peek(get_indx(address))).to_u8)\n    when \"BITzpg\"\n      bit((peek(address)).to_u8)\n    when \"ANDzpg\"\n      and((peek(address)).to_u8)\n    when \"ROLzpg\"\n      rol((peek(address)).to_u8, address)\n    when \"PLP\"\n      plp()\n    when \"ANDi\"\n      and(address.to_u8)\n    when \"ROLa\"\n      rol(@accumulator, @accumulator, true)\n    when \"BITabs\"\n      bit((peek(address)).to_u8)\n    when \"ANDabs\"\n      and((peek(address)).to_u8)\n    when \"ROLabs\"\n      rol((peek(address)).to_u8, address)\n    when \"BMI\"\n      bmi(address.to_u8)\n    when \"ANDindy\"\n      and((peek(get_indy(address))).to_u8)\n    when \"ANDzpgx\"\n      and((peek((address + @x_index) & 255)).to_u8)\n    when \"ROLzpgx\"\n      rol((peek((address + @x_index) & 255)).to_u8, (address + @x_index) & 255)\n    when \"SEC\"\n      sec()\n    when \"ANDabsy\"\n      and((peek((address + @y_index) & 65535)).to_u8)\n    when \"ANDabsx\"\n      and((peek((address + @x_index) & 65535)).to_u8)\n    when \"ROLabsx\"\n      rol((peek((address + @x_index) & 65535)).to_u8, (address + @x_index) & 65535)\n    when \"RTI\"\n      rti()\n    when \"EORindx\"\n      eor((peek(get_indx(address))).to_u8)\n    when \"EORzpg\"\n      eor((peek(address)).to_u8)\n    when \"LSRzpg\"\n      lsr((peek(address)).to_u8, address)\n    when \"PHA\"\n      pha()\n    when \"EORi\"\n      eor(address.to_u8)\n    when \"LSRa\"\n      lsr(@accumulator, @accumulator, true)\n    when \"JMPabs\"\n      jmp(address.to_u16)\n    when \"EORabs\"\n      eor((peek(address)).to_u8)\n    when \"LSRabs\"\n      lsr((peek(address)).to_u8, address)\n    when \"BVC\"\n      bvc(address.to_u8)\n    when \"EORindy\"\n      eor((peek(get_indy(address))).to_u8)\n    when \"EORzpgx\"\n      eor((peek((address + @x_index) & 255)).to_u8)\n    when \"LSRzpgx\"\n      lsr((peek((address + @x_index) & 255)).to_u8, (address + @x_index) & 255)\n    when \"CLI\"\n      cli()\n    when \"EORabsy\"\n      eor(absy = (peek((address + @y_index) & 65535)).to_u8)\n    when \"EORabsx\"\n      eor(absx = (peek((address + @x_index) & 65535)).to_u8)\n    when \"LSRabsx\"\n      lsr((peek((address + @x_index) & 65535)).to_u8, (address + @x_index) & 65535)\n    when \"RTS\"\n      rts()\n    when \"ADCindx\"\n      adc((peek(get_indx(address))).to_u8)\n    when \"ADCzpg\"\n      adc((peek(address)).to_u8)\n    when \"RORzpg\"\n      ror((peek(address)).to_u8, address)\n    when \"PLA\"\n      pla()\n    when \"ADCi\"\n      adc(address.to_u8)\n    when \"RORa\"\n      ror(@accumulator, @accumulator, true)\n    when \"JMPind\"\n      jmp((peek(address, true)).to_u16)\n    when \"ADCabs\"\n      adc((peek(address)).to_u8)\n    when \"RORabs\"\n      ror((peek(address)).to_u8, address)\n    when \"BVS\"\n      bvs(address.to_u8)\n    when \"ADCindy\"\n      adc((peek(get_indy(address))).to_u8)\n    when \"ADCzpgx\"\n      adc((peek((address + @x_index) & 255)).to_u8)\n    when \"RORzpgx\"\n      ror((peek((address + @x_index) & 255)).to_u8, (address + @x_index) & 255)\n    when \"SEI\"\n      sei()\n    when \"ADCabsy\"\n      adc((peek((address + @y_index) & 65535)).to_u8)\n    when \"ADCabsx\"\n      adc((peek((address + @x_index) & 65535)).to_u8)\n    when \"RORabsx\"\n      ror((peek((address + @x_index) & 65535)).to_u8, (address + @x_index) & 65535)\n    when \"STAindx\"\n      sta(get_indx(address))\n    when \"STYzpg\"\n      sty(address)\n    when \"STAzpg\"\n      sta(address)\n    when \"STXzpg\"\n      stx(address)\n    when \"DEY\"\n      dey()\n    when \"TXA\"\n      txa()\n    when \"STYabs\"\n      sty(address)\n    when \"STAabs\"\n      sta(address)\n    when \"STXabs\"\n      stx(address)\n    when \"BCC\"\n      bcc(address.to_u8)\n    when \"STAindy\"\n      sta(get_indy(address))\n    when \"STYzpgx\"\n      sty((address + @x_index) & 255)\n    when \"STAzpgx\"\n      sta((address + @x_index) & 255)\n    when \"STXzpgy\"\n      stx((address + @y_index) & 255)\n    when \"TYA\"\n      tya()\n    when \"STAabsy\"\n      sta((address + @y_index) & 65535)\n    when \"TXS\"\n      txs()\n    when \"STAabsx\"\n      sta((address + @x_index) & 65535)\n    when \"LDYi\"\n      ldy(address.to_u8)\n    when \"LDAindx\"\n      lda((peek(get_indx(address))).to_u8)\n    when \"LDXi\"\n      ldx(address.to_u8)\n    when \"LDYzpg\"\n      ldy((peek(address)).to_u8)\n    when \"LDAzpg\"\n      lda((peek(address)).to_u8)\n    when \"LDXzpg\"\n      ldx((peek(address)).to_u8)\n    when \"TAY\"\n      tay()\n    when \"LDAi\"\n      lda(address.to_u8)\n    when \"TAX\"\n      tax()\n    when \"LDYabs\"\n      ldy((peek(address)).to_u8)\n    when \"LDAabs\"\n      lda((peek(address)).to_u8)\n    when \"LDXabs\"\n      ldx((peek(address)).to_u8)\n    when \"BCS\"\n      bcs(address.to_u8)\n    when \"LDAindy\"\n      lda((peek(get_indy(address))).to_u8)\n    when \"LDYzpgx\"\n      ldy((peek((address + @x_index) & 255)).to_u8)\n    when \"LDAzpgx\"\n      lda((peek((address + @x_index) & 255)).to_u8)\n    when \"LDXzpgy\"\n      ldy((peek((address + @y_index) & 255)).to_u8)\n    when \"CLV\"\n      clv()\n    when \"LDAabsy\"\n      lda((peek((address + @y_index) & 65535)).to_u8)\n    when \"TSX\"\n      tsx()\n    when \"LDYabsx\"\n      ldy((peek((address + @x_index) & 65535)).to_u8)\n    when \"LDAabsx\"\n      lda((peek((address + @x_index) & 65535)).to_u8)\n    when \"LDXabsy\"\n      ldx((peek((address + @y_index) & 65535)).to_u8)\n    when \"CPYi\"\n      cpy(address.to_u8)\n    when \"CMPindx\"\n      cmp((peek(get_indx(address))).to_u8)\n    when \"CPYzpg\"\n      cpy((peek(address)).to_u8)\n    when \"CMPzpg\"\n      cmp((peek(address)).to_u8)\n    when \"DECzpg\"\n      dec((peek(address)).to_u8, address)\n    when \"INY\"\n      iny()\n    when \"CMPi\"\n      cmp(address.to_u8)\n    when \"DEX\"\n      dex()\n    when \"CPYabs\"\n      cpy((peek(address)).to_u8)\n    when \"CMPabs\"\n      cmp((peek(address)).to_u8)\n    when \"DECabs\"\n      dec((peek(address)).to_u8, address)\n    when \"BNE\"\n      bne(address.to_u8)\n    when \"CMPindy\"\n      cmp((peek(get_indy(address))).to_u8)\n    when \"CMPzpgx\"\n      cmp((peek((address + @x_index) & 255)).to_u8)\n    when \"DECzpgx\"\n      dec((peek((address + @x_index) & 255)).to_u8, (address + @x_index) & 255)\n    when \"CLD\"\n      cld()\n    when \"CMPabsy\"\n      cmp((peek((address + @y_index) & 65535)).to_u8)\n    when \"CMPabsx\"\n      cmp((peek((address + @x_index) & 65535)).to_u8)\n    when \"DECabsx\"\n      dec((peek((address + @x_index) & 65535)).to_u8, (address + @x_index) & 65535)\n    when \"CPXi\"\n      cpx(address.to_u8)\n    when \"SBCindx\"\n      sbc((peek(get_indx(address))).to_u8)\n    when \"CPXzpg\"\n      cpx((peek(address)).to_u8)\n    when \"SBCzpg\"\n      sbc((peek(address)).to_u8)\n    when \"INCzpg\"\n      inc((peek(address)).to_u8, address)\n    when \"INX\"\n      inx()\n    when \"SBCi\"\n      sbc(address.to_u8)\n    when \"NOP\"\n      nop()\n    when \"CPXabs\"\n      cpx((peek(address)).to_u8)\n    when \"SBCabs\"\n      sbc((peek(address)).to_u8)\n    when \"INCabs\"\n      inc((peek(address)).to_u8, address)\n    when \"BEQ\"\n      beq(address.to_u8)\n    when \"SBCindy\"\n      sbc((peek(get_indy(address))).to_u8)\n    when \"SBCzpgx\"\n      sbc((peek((address + @x_index) & 255)).to_u8)\n    when \"INCzpgx\"\n      inc((peek((address + @x_index) & 255)).to_u8, (address + @x_index) & 255)\n    when \"SED\"\n      sed()\n    when \"SBCabsy\"\n      sbc((peek((address + @y_index) & 65535)).to_u8)\n    when \"SBCabsx\"\n      sbc((peek((address + @x_index) & 65535)).to_u8)\n    when \"INCabsx\"\n      inc((peek((address + @x_index) & 65535)).to_u8, (address + @x_index) & 65535)\n    when \"PRTzpg\"\n      prt(address.to_u8)\n    when \"PRTabs\"\n      prt(address.to_u16)\n    when \"LOG\"\n      log()\n    when \"STP\"\n      stp()\n    when \"BCClabel\"\n      bcc(address.to_u16)\n    when \"BCSlabel\"\n      bcs(address.to_u16)\n    when \"BEQlabel\"\n      beq(address.to_u16)\n    when \"BMIlabel\"\n      bmi(address.to_u16)\n    when \"BNElabel\"\n      bne(address.to_u16)\n    when \"BPLlabel\"\n      bpl(address.to_u16)\n    when \"BVClabel\"\n      bvc(address.to_u16)\n    when \"BVSlabel\"\n      bvs(address.to_u16)\n    end\n  end\nend\n"}},{"html_id":"sbc(m_value:UInt8)-instance-method","name":"sbc","doc":"Subtract with Carry\n\nSBC behavior depends on the state of the `CPU::Flags::DecimalMode` flag. In decimal mode, the values upon which the subtraction is performed are interpreted as packed BCD (Binary Coded Decimal).","summary":"<p>Subtract with Carry</p>","abstract":false,"args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8"}],"args_string":"(m_value : UInt8)","args_html":"(m_value : UInt8)","location":{"filename":"src/cr6502/instructions/math_instructions.cr","line_number":24,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/math_instructions.cr#L24"},"def":{"name":"sbc","args":[{"name":"m_value","external_name":"m_value","restriction":"UInt8"}],"visibility":"Public","body":"if get_flag(Flags::DecimalMode)\n  t = ((bcd(@accumulator)) - (bcd(m_value))) - (get_flag(Flags::Carry) ? 0 : 1)\n  set_flag(Flags::Overflow, t > 99 || t < 0)\nelse\n  t = (@accumulator - m_value) - (get_flag(Flags::Carry) ? 0 : 1)\n  set_flag(Flags::Overflow, t > 127 || t < -128)\nend\nset_flag(Flags::Carry, t >= 0)\nset_flag(Flags::Negative, (t.bit(7)) == 1)\nset_flag(Flags::Zero, t == 0)\n@accumulator = t & 255\n"}},{"html_id":"sec-instance-method","name":"sec","doc":"Set Carry","summary":"<p>Set Carry</p>","abstract":false,"location":{"filename":"src/cr6502/instructions/flag_instructions.cr","line_number":8,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/flag_instructions.cr#L8"},"def":{"name":"sec","visibility":"Public","body":"set_flag(Flags::Carry, true)"}},{"html_id":"sed-instance-method","name":"sed","doc":"Set Decimal","summary":"<p>Set Decimal</p>","abstract":false,"location":{"filename":"src/cr6502/instructions/flag_instructions.cr","line_number":28,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/flag_instructions.cr#L28"},"def":{"name":"sed","visibility":"Public","body":"set_flag(Flags::DecimalMode, true)"}},{"html_id":"sei-instance-method","name":"sei","doc":"Set Interrupt","summary":"<p>Set Interrupt</p>","abstract":false,"location":{"filename":"src/cr6502/instructions/flag_instructions.cr","line_number":18,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/flag_instructions.cr#L18"},"def":{"name":"sei","visibility":"Public","body":"set_flag(Flags::InterruptDisable, true)"}},{"html_id":"set_flag(flag:Flags,set:Bool)-instance-method","name":"set_flag","doc":"Sets the value of a bit in `flags`","summary":"<p>Sets the value of a bit in <code><a href=\"CPU.html#flags%3AUInt8-instance-method\">#flags</a></code></p>","abstract":false,"args":[{"name":"flag","external_name":"flag","restriction":"Flags"},{"name":"set","external_name":"set","restriction":"Bool"}],"args_string":"(flag : Flags, set : Bool)","args_html":"(flag : <a href=\"CPU/Flags.html\">Flags</a>, set : Bool)","location":{"filename":"src/cr6502/6502.cr","line_number":337,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/6502.cr#L337"},"def":{"name":"set_flag","args":[{"name":"flag","external_name":"flag","restriction":"Flags"},{"name":"set","external_name":"set","restriction":"Bool"}],"visibility":"Public","body":"if set\n  case flag\n  when Flags::Negative\n    @flags = @flags | 128\n  when Flags::Overflow\n    @flags = @flags | 64\n  when Flags::Break\n    @flags = @flags | 16\n  when Flags::DecimalMode\n    @flags = @flags | 8\n  when Flags::InterruptDisable\n    @flags = @flags | 4\n  when Flags::Zero\n    @flags = @flags | 2\n  when Flags::Carry\n    @flags = @flags | 1\n  end\nelse\n  case flag\n  when Flags::Negative\n    @flags = @flags & 127\n  when Flags::Overflow\n    @flags = @flags & 191\n  when Flags::Break\n    @flags = @flags & 239\n  when Flags::DecimalMode\n    @flags = @flags & 247\n  when Flags::InterruptDisable\n    @flags = @flags & 251\n  when Flags::Zero\n    @flags = @flags & 253\n  when Flags::Carry\n    @flags = @flags & 254\n  end\nend"}},{"html_id":"sta(m:UInt16|UInt8)-instance-method","name":"sta","doc":"Store Accumulator","summary":"<p>Store Accumulator</p>","abstract":false,"args":[{"name":"m","external_name":"m","restriction":"UInt16 | UInt8"}],"args_string":"(m : UInt16 | UInt8)","args_html":"(m : UInt16 | UInt8)","location":{"filename":"src/cr6502/instructions/memory_instructions.cr","line_number":31,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/memory_instructions.cr#L31"},"def":{"name":"sta","args":[{"name":"m","external_name":"m","restriction":"UInt16 | UInt8"}],"visibility":"Public","body":"poke(m, @accumulator)"}},{"html_id":"stack_pointer:UInt8-instance-method","name":"stack_pointer","doc":"The 8-bit stack pointer which points to the current position in the Stack.\n\nThe stack ranges from 0x100 to 0x1FF, starting at 0x1FF","summary":"<p>The 8-bit stack pointer which points to the current position in the Stack.</p>","abstract":false,"location":{"filename":"src/cr6502/6502.cr","line_number":198,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/6502.cr#L198"},"def":{"name":"stack_pointer","return_type":"UInt8","visibility":"Public","body":"@stack_pointer"}},{"html_id":"step(end_on_tight_loop:Bool=true)-instance-method","name":"step","doc":"Runs the next instruction\n\nif `end_on_tight_loop` is `true`, it will not step if the current instruction sets the `program_counter` to itself, creating a tight loop\n\nNOTE: A real 6502 does not end on tight loops, this is only used to ensure that a program doesn't run forever","summary":"<p>Runs the next instruction</p>","abstract":false,"args":[{"name":"end_on_tight_loop","default_value":"true","external_name":"end_on_tight_loop","restriction":"Bool"}],"args_string":"(end_on_tight_loop : Bool = true)","args_html":"(end_on_tight_loop : Bool = <span class=\"n\">true</span>)","location":{"filename":"src/cr6502/6502.cr","line_number":247,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/6502.cr#L247"},"def":{"name":"step","args":[{"name":"end_on_tight_loop","default_value":"true","external_name":"end_on_tight_loop","restriction":"Bool"}],"visibility":"Public","body":"if end_on_tight_loop\n  if @program_counter != @previous_program_counter\n    @previous_program_counter = @program_counter\n    run_instruction\n  end\nelse\n  run_instruction\nend"}},{"html_id":"stp-instance-method","name":"stp","doc":"Stops any active running `CPU#execute`\n\nWhen used with `CPU#execute(reset: false)`, it can act as a way to pause","summary":"<p>Stops any active running <code><a href=\"CPU.html#execute%28end_on_tight_loop%3ABool%3Dtrue%2Creset%3ABool%3Dtrue%29-instance-method\">CPU#execute</a></code></p>","abstract":false,"location":{"filename":"src/cr6502/instructions/custom_instructions.cr","line_number":51,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/custom_instructions.cr#L51"},"def":{"name":"stp","visibility":"Public","body":"@stop_exec = true"}},{"html_id":"stx(m:UInt16|UInt8)-instance-method","name":"stx","doc":"Store X Register","summary":"<p>Store X Register</p>","abstract":false,"args":[{"name":"m","external_name":"m","restriction":"UInt16 | UInt8"}],"args_string":"(m : UInt16 | UInt8)","args_html":"(m : UInt16 | UInt8)","location":{"filename":"src/cr6502/instructions/memory_instructions.cr","line_number":36,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/memory_instructions.cr#L36"},"def":{"name":"stx","args":[{"name":"m","external_name":"m","restriction":"UInt16 | UInt8"}],"visibility":"Public","body":"poke(m, @x_index)"}},{"html_id":"sty(m:UInt16|UInt8)-instance-method","name":"sty","doc":"Store Y Register","summary":"<p>Store Y Register</p>","abstract":false,"args":[{"name":"m","external_name":"m","restriction":"UInt16 | UInt8"}],"args_string":"(m : UInt16 | UInt8)","args_html":"(m : UInt16 | UInt8)","location":{"filename":"src/cr6502/instructions/memory_instructions.cr","line_number":41,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/memory_instructions.cr#L41"},"def":{"name":"sty","args":[{"name":"m","external_name":"m","restriction":"UInt16 | UInt8"}],"visibility":"Public","body":"poke(m, @y_index)"}},{"html_id":"tax-instance-method","name":"tax","doc":"Transfer A to X","summary":"<p>Transfer A to X</p>","abstract":false,"location":{"filename":"src/cr6502/instructions/register_instructions.cr","line_number":5,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/register_instructions.cr#L5"},"def":{"name":"tax","visibility":"Public","body":"@x_index = @accumulator\nset_flag(Flags::Negative, (@x_index.bit(7)) == 1)\nset_flag(Flags::Zero, @x_index == 0)\n"}},{"html_id":"tay-instance-method","name":"tay","doc":"\tTransfer A to Y","summary":"<p>Transfer A to Y</p>","abstract":false,"location":{"filename":"src/cr6502/instructions/register_instructions.cr","line_number":33,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/register_instructions.cr#L33"},"def":{"name":"tay","visibility":"Public","body":"@y_index = @accumulator\nset_flag(Flags::Negative, (@y_index.bit(7)) == 1)\nset_flag(Flags::Zero, @y_index == 0)\n"}},{"html_id":"tsx-instance-method","name":"tsx","doc":"Transfer Stack Pointer to X","summary":"<p>Transfer Stack Pointer to X</p>","abstract":false,"location":{"filename":"src/cr6502/instructions/stack_instructions.cr","line_number":19,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/stack_instructions.cr#L19"},"def":{"name":"tsx","visibility":"Public","body":"@x_index = @stack_pointer\nset_flag(Flags::Negative, (@x_index.bit(7)) == 1)\nset_flag(Flags::Zero, @x_index == 0)\n"}},{"html_id":"txa-instance-method","name":"txa","doc":"\tTranfer X to A","summary":"<p>Tranfer X to A</p>","abstract":false,"location":{"filename":"src/cr6502/instructions/register_instructions.cr","line_number":12,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/register_instructions.cr#L12"},"def":{"name":"txa","visibility":"Public","body":"@accumulator = @x_index\nset_flag(Flags::Negative, (@accumulator.bit(7)) == 1)\nset_flag(Flags::Zero, @accumulator == 0)\n"}},{"html_id":"txs-instance-method","name":"txs","doc":"\tTransfer X to Stack Pointer","summary":"<p>Transfer X to Stack Pointer</p>","abstract":false,"location":{"filename":"src/cr6502/instructions/stack_instructions.cr","line_number":40,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/stack_instructions.cr#L40"},"def":{"name":"txs","visibility":"Public","body":"@stack_pointer = @x_index"}},{"html_id":"tya-instance-method","name":"tya","doc":"\tTransfer Y to A","summary":"<p>Transfer Y to A</p>","abstract":false,"location":{"filename":"src/cr6502/instructions/register_instructions.cr","line_number":40,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/instructions/register_instructions.cr#L40"},"def":{"name":"tya","visibility":"Public","body":"@accumulator = @y_index\nset_flag(Flags::Negative, (@accumulator.bit(7)) == 1)\nset_flag(Flags::Zero, @accumulator == 0)\n"}},{"html_id":"x_index:UInt8-instance-method","name":"x_index","doc":"The 8-bit x index register","summary":"<p>The 8-bit x index register</p>","abstract":false,"location":{"filename":"src/cr6502/6502.cr","line_number":192,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/6502.cr#L192"},"def":{"name":"x_index","return_type":"UInt8","visibility":"Public","body":"@x_index"}},{"html_id":"y_index:UInt8-instance-method","name":"y_index","doc":"The 8-bit y index register","summary":"<p>The 8-bit y index register</p>","abstract":false,"location":{"filename":"src/cr6502/6502.cr","line_number":194,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/6502.cr#L194"},"def":{"name":"y_index","return_type":"UInt8","visibility":"Public","body":"@y_index"}}],"macros":[{"html_id":"parse_address-macro","name":"parse_address","doc":"Parses the address of the line of code","summary":"<p>Parses the address of the line of code</p>","abstract":false,"location":{"filename":"src/cr6502/parser.cr","line_number":59,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser.cr#L59"},"def":{"name":"parse_address","visibility":"Public","body":"    if scanner.tokens[current_index].type == TokenType::Dollar\n      current_index += 1\n      address = scanner.tokens[current_index].literal.as(Int32)\n      address = (address <= 255 ? address.to_u8 : address.to_u16)\n    \nelsif scanner.tokens[current_index].type == TokenType::Percent\n      current_index += 1\n      address = scanner.tokens[current_index].literal.as(Int32)\n      address = (address <= 255 ? address.to_u8 : address.to_u16)\n    \nelse\n        address = scanner.tokens[current_index].literal.as(Int32)\n        address = (address <= 255 ? address.to_u8 : address.to_u16)\n    \nend\n  \n"}},{"html_id":"parse_address_mode-macro","name":"parse_address_mode","doc":"Parses the address mode of the current line of code","summary":"<p>Parses the address mode of the current line of code</p>","abstract":false,"location":{"filename":"src/cr6502/parser.cr","line_number":3,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser.cr#L3"},"def":{"name":"parse_address_mode","visibility":"Public","body":"    current_index += 1\n    if scanner.tokens[current_index].type == TokenType::A\n      address_mode = AddressModes::Accumulator\n    \nelsif scanner.tokens[current_index].type == TokenType::Hash\n      address_mode = AddressModes::Immediate\n      current_index += 1\n      parse_address\n    \nelsif scanner.tokens[current_index].type == TokenType::Integer\n      parse_address\n      if address.bit_length <= 8\n        if scanner.tokens[current_index+1].type == TokenType::Comma && scanner.tokens[current_index+2].type == TokenType::X\n          current_index += 2\n          address_mode = AddressModes::ZeroPageX\n        \nelsif scanner.tokens[current_index+1].type == TokenType::Comma && scanner.tokens[current_index+2].type == TokenType::Y\n          current_index += 2\n          address_mode = AddressModes::ZeroPageY\n        \nelsif scanner.tokens[current_index+1].type == TokenType::EOF\n          address_mode = AddressModes::ZeroPage\n        \nend\n      \nelsif address.bit_length <= 16\n        if scanner.tokens[current_index+1].type == TokenType::Comma && scanner.tokens[current_index+2].type == TokenType::X\n          current_index += 2\n          address_mode = AddressModes::AbsoluteX\n        \nelsif scanner.tokens[current_index+1].type == TokenType::Comma && scanner.tokens[current_index+2].type == TokenType::Y\n          current_index += 2\n          address_mode = AddressModes::AbsoluteY\n        \nelsif scanner.tokens[current_index+1].type == TokenType::EOF\n          address_mode = AddressModes::Absolute\n        \nend\n      \nelse\n        raise ScannerException.new(\"Invalid command \\\"#{line}\\\" on line ##{line_number}\")\n      \nend\n    \nelsif scanner.tokens[current_index].type == TokenType::LeftParen\n      current_index +=1\n      parse_address\n      if scanner.tokens[current_index+1].type == TokenType::RightParen && scanner.tokens[current_index+2].type == TokenType::EOF\n        address_mode = AddressModes::Indirect\n      \nelsif address.bit_length <= 8\n        if scanner.tokens[current_index+1].type == TokenType::Comma && scanner.tokens[current_index+2].type == TokenType::X && scanner.tokens[current_index+3].type == TokenType::RightParen && scanner.tokens[current_index+4].type == TokenType::EOF\n          current_index += 2\n          address_mode = AddressModes::IndirectX\n        \nelsif scanner.tokens[current_index+1].type == TokenType::RightParen && scanner.tokens[current_index+2].type == TokenType::Comma && scanner.tokens[current_index+3].type == TokenType::Y && scanner.tokens[current_index+4].type == TokenType::EOF\n          address_mode = AddressModes::IndirectY\n        \nelse\n          raise ScannerException.new(\"Invalid command \\\"#{line}\\\" on line ##{line_number}\")\n        \nend\n      \nelse\n        raise ScannerException.new(\"Invalid command \\\"#{line}\\\" on line ##{line_number}\")\n      \nend\n    \nelse\n      raise ScannerException.new(\"Invalid command \\\"#{line}\\\" on line ##{line_number}\")\n    \nend\n  \n"}}],"types":[{"html_id":"cr6502/CPU/AddressModes","path":"CPU/AddressModes.html","kind":"enum","full_name":"CPU::AddressModes","name":"AddressModes","abstract":false,"ancestors":[{"html_id":"cr6502/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"cr6502/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"cr6502/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cr6502/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cr6502/addressing.cr","line_number":3,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/addressing.cr#L3"}],"repository_name":"cr6502","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Accumulator","name":"Accumulator","value":"0","doc":"There are a number of \"atomic read/modify/write\" instructions which can address EITHER Memory OR the Accumulator (A)","summary":"<p>There are a number of &quot;atomic read/modify/write&quot; instructions which can address EITHER Memory OR the Accumulator (A)</p>"},{"id":"Immediate","name":"Immediate","value":"1","doc":"A better name for this mode might be Immediate Value as no \"addressing\" actually takes place.","summary":"<p>A better name for this mode might be Immediate Value as no &quot;addressing&quot; actually takes place.</p>"},{"id":"ZeroPage","name":"ZeroPage","value":"2","doc":"Much like Absolute Addressing, but can only address the first 256 (0..255) bytes of memory.","summary":"<p>Much like Absolute Addressing, but can only address the first 256 (0..255) bytes of memory.</p>"},{"id":"ZeroPageX","name":"ZeroPageX","value":"3","doc":"In Zero-Page Addressing the destination address is fixed by the programmer (or assembler) at assembly time.\nBy using the hard-coded address as a base, and `CPU#x_index` as an Index, a more dynamic addressing system can be implemented.\nWith Zero-Page, only the first 256 (0..255) bytes of memory may be addressed. So if the result of Base+`CPU#x_index` is greater than $FF, wrapping will occur.","summary":"<p>In Zero-Page Addressing the destination address is fixed by the programmer (or assembler) at assembly time.</p>"},{"id":"ZeroPageY","name":"ZeroPageY","value":"4","doc":"In Zero-Page Addressing the destination address is fixed by the programmer (or assembler) at assembly time.\nBy using the hard-coded address as a base, and `CPU#y_index` as an Index, a more dynamic addressing system can be implemented.\nWith Zero-Page, only the first 256 (0..255) bytes of memory may be addressed. So if the result of Base+`CPU#y_index` is greater than $FF, wrapping will occur.","summary":"<p>In Zero-Page Addressing the destination address is fixed by the programmer (or assembler) at assembly time.</p>"},{"id":"Absolute","name":"Absolute","value":"5","doc":"Read a value from a 16-bit address\nRemember without special external hardware for paging, the 6502 only has a maximum of 64K of address space available - so 16-bits is enough to address ANY byte of memory.","summary":"<p>Read a value from a 16-bit address Remember without special external hardware for paging, the 6502 only has a maximum of 64K of address space available - so 16-bits is enough to address ANY byte of memory.</p>"},{"id":"AbsoluteX","name":"AbsoluteX","value":"6","doc":"In Absolute Addressing the destination address is fixed by the programmer (or assembler) at assembly time.\nBy using the hard-coded address as a base, and `CPU#x_index` as an Index, a more dynamic addressing system can be implemented.\nIf the result of Base+`CPU#x_index` is greater than $FFFF, wrapping will occur.","summary":"<p>In Absolute Addressing the destination address is fixed by the programmer (or assembler) at assembly time.</p>"},{"id":"AbsoluteY","name":"AbsoluteY","value":"7","doc":"In Absolute Addressing the destination address is fixed by the programmer (or assembler) at assembly time.\nBy using the hard-coded address as a base, and `CPU#y_index` as an Index, a more dynamic addressing system can be implemented.\nIf the result of Base+`CPU#y_index` is greater than $FFFF, wrapping will occur.","summary":"<p>In Absolute Addressing the destination address is fixed by the programmer (or assembler) at assembly time.</p>"},{"id":"Indirect","name":"Indirect","value":"8","doc":"With this instruction, the 8-but address (location) supplied by the programmer is considered to be a Zero-Page address, that is, an address in the first 256 (0..255) bytes of memory.\nThe content of this Zero-Page address must contain the low 8-bits of a memory address\nThe following byte (the contents of address+1) must contain the upper 8-bits of a memory address\nOnce this memory address has been read from the Zero-Page location (specified by the programmer), this calculated memory address is then examined, and it's contents are returned.","summary":"<p>With this instruction, the 8-but address (location) supplied by the programmer is considered to be a Zero-Page address, that is, an address in the first 256 (0..255) bytes of memory.</p>"},{"id":"IndirectX","name":"IndirectX","value":"9","doc":"This addressing mode is only available with X.\nMuch like Indirect Addressing, but the contents of the index register is added to the Zero-Page address (location)\nIf Base_Location+Index is greater than $FF, wrapping will occur.","summary":"<p>This addressing mode is only available with X.</p>"},{"id":"IndirectY","name":"IndirectY","value":"10","doc":"This addressing mode is only available with Y.\nMuch like Indexed Addressing, but the contents of the index register is added to the Base_Location after it is read from Zero-Page memory.\nIf Base_Location+Index is greater than $FFFF, wrapping will occur.","summary":"<p>This addressing mode is only available with Y.</p>"}],"namespace":{"html_id":"cr6502/CPU","kind":"class","full_name":"CPU","name":"CPU"},"doc":"The modes of addressing","summary":"<p>The modes of addressing</p>","instance_methods":[{"html_id":"absolute?-instance-method","name":"absolute?","abstract":false,"location":{"filename":"src/cr6502/addressing.cr","line_number":20,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/addressing.cr#L20"},"def":{"name":"absolute?","visibility":"Public","body":"self == Absolute"}},{"html_id":"absolute_x?-instance-method","name":"absolute_x?","abstract":false,"location":{"filename":"src/cr6502/addressing.cr","line_number":24,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/addressing.cr#L24"},"def":{"name":"absolute_x?","visibility":"Public","body":"self == AbsoluteX"}},{"html_id":"absolute_y?-instance-method","name":"absolute_y?","abstract":false,"location":{"filename":"src/cr6502/addressing.cr","line_number":28,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/addressing.cr#L28"},"def":{"name":"absolute_y?","visibility":"Public","body":"self == AbsoluteY"}},{"html_id":"accumulator?-instance-method","name":"accumulator?","abstract":false,"location":{"filename":"src/cr6502/addressing.cr","line_number":5,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/addressing.cr#L5"},"def":{"name":"accumulator?","visibility":"Public","body":"self == Accumulator"}},{"html_id":"immediate?-instance-method","name":"immediate?","abstract":false,"location":{"filename":"src/cr6502/addressing.cr","line_number":7,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/addressing.cr#L7"},"def":{"name":"immediate?","visibility":"Public","body":"self == Immediate"}},{"html_id":"indirect?-instance-method","name":"indirect?","abstract":false,"location":{"filename":"src/cr6502/addressing.cr","line_number":33,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/addressing.cr#L33"},"def":{"name":"indirect?","visibility":"Public","body":"self == Indirect"}},{"html_id":"indirect_x?-instance-method","name":"indirect_x?","abstract":false,"location":{"filename":"src/cr6502/addressing.cr","line_number":37,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/addressing.cr#L37"},"def":{"name":"indirect_x?","visibility":"Public","body":"self == IndirectX"}},{"html_id":"indirect_y?-instance-method","name":"indirect_y?","abstract":false,"location":{"filename":"src/cr6502/addressing.cr","line_number":41,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/addressing.cr#L41"},"def":{"name":"indirect_y?","visibility":"Public","body":"self == IndirectY"}},{"html_id":"zero_page?-instance-method","name":"zero_page?","abstract":false,"location":{"filename":"src/cr6502/addressing.cr","line_number":9,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/addressing.cr#L9"},"def":{"name":"zero_page?","visibility":"Public","body":"self == ZeroPage"}},{"html_id":"zero_page_x?-instance-method","name":"zero_page_x?","abstract":false,"location":{"filename":"src/cr6502/addressing.cr","line_number":13,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/addressing.cr#L13"},"def":{"name":"zero_page_x?","visibility":"Public","body":"self == ZeroPageX"}},{"html_id":"zero_page_y?-instance-method","name":"zero_page_y?","abstract":false,"location":{"filename":"src/cr6502/addressing.cr","line_number":17,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/addressing.cr#L17"},"def":{"name":"zero_page_y?","visibility":"Public","body":"self == ZeroPageY"}}]},{"html_id":"cr6502/CPU/ASMException","path":"CPU/ASMException.html","kind":"class","full_name":"CPU::ASMException","name":"ASMException","abstract":false,"superclass":{"html_id":"cr6502/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"cr6502/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"cr6502/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cr6502/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cr6502/parser/error.cr","line_number":2,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/error.cr#L2"}],"repository_name":"cr6502","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"cr6502/CPU/LineParsingException","kind":"class","full_name":"CPU::LineParsingException","name":"LineParsingException"},{"html_id":"cr6502/CPU/ScannerException","kind":"class","full_name":"CPU::ScannerException","name":"ScannerException"}],"namespace":{"html_id":"cr6502/CPU","kind":"class","full_name":"CPU","name":"CPU"}},{"html_id":"cr6502/CPU/Flags","path":"CPU/Flags.html","kind":"enum","full_name":"CPU::Flags","name":"Flags","abstract":false,"ancestors":[{"html_id":"cr6502/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"cr6502/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"cr6502/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cr6502/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cr6502/6502.cr","line_number":141,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/6502.cr#L141"}],"repository_name":"cr6502","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Negative","name":"Negative","value":"0","doc":"### The Sign Flag\nSign Flag serves TWO purposes\n1) \tTo signify the sigN of the last mathematical or bitwise operation.\n\tThe sign is the bit-7 of the result value.\n\tIf the last operation was not a signed operation, P.N will still reflect bit-7 of the result, but will NOT be considered as a sign.\n2) \tAs a result store for a `CPU#bit` instruction:\n\tThe `CPU#bit` instruction reads the contents of the specified memory address and copies bit-7 of that value to the Sign Flag","summary":"<h3><a id=\"the-sign-flag-sign-flag-serves-two-purposes-1-to-signify-the-sig-n-of-the-last-mathematical-or-bitwise-operation.\" class=\"anchor\" href=\"#the-sign-flag-sign-flag-serves-two-purposes-1-to-signify-the-sig-n-of-the-last-mathematical-or-bitwise-operation.\">  <svg class=\"octicon-link\" aria-hidden=\"true\">\n    <use href=\"#octicon-link\"/>\n  </svg>\n</a>The Sign Flag Sign Flag serves TWO purposes 1) \tTo signify the sigN of the last mathematical or bitwise operation.</h3>"},{"id":"Overflow","name":"Overflow","value":"1","doc":"### The Overflow Flag\nP.V serves TWO purposes\n1) \tTo signify an oVerflow (a sign change) during a mathmatical operation. Caused by an `CPU#adc` or `CPU#sbc` instruction:\n\tIf an `CPU#adc` or `CPU#sbc` instruction generates a result that would require more than 8 bits to hold (that is, any number outside the range -128 to 127) then Overflow is SET; else Overflow is CLEARed.\n\tThis flag may be ignored if the programmer is NOT using signed arithmetic.\n2) \tAs a result store for a `CPU#bit` instruction:\n\tThe `CPU#bit` instruction reads the contents of the specified memory address and copies bit-6 of that value to P.V","summary":"<h3><a id=\"the-overflow-flag-p.v-serves-two-purposes-1-to-signify-an-o-verflow-a-sign-change-during-a-mathmatical-operation.\" class=\"anchor\" href=\"#the-overflow-flag-p.v-serves-two-purposes-1-to-signify-an-o-verflow-a-sign-change-during-a-mathmatical-operation.\">  <svg class=\"octicon-link\" aria-hidden=\"true\">\n    <use href=\"#octicon-link\"/>\n  </svg>\n</a>The Overflow Flag P.V serves TWO purposes 1) \tTo signify an oVerflow (a sign change) during a mathmatical operation.</h3>"},{"id":"Break","name":"Break","value":"2","doc":"### The Break Flag\nThe Break Flag and the `CPU#brk` instruction seem to me to be one very badly thought out bodge.\nIf you do not plan to use the `CPU#brk` instruction I would just ignore it!\nP.B is never actually set in the Flags register!\nWhen a `CPU#brk` instruction occurs the Flags are PUSHed onto the Stack along with a return address*\nIt is only this copy of the Flags (the one on the Stack) that has P.B set!\n\n* This return address is actually \"Address_of_BRK_instruction+2\".\n\tBearing in mind that the `CPU#brk` instruction is only ONE byte long...\n\tThis means that if you simply issue an `CPU#rti`,\n\tThe byte immediately following the `CPU#brk` instruction will be ignored.\n\tI have read reasons as to WHY this is the case, but frankly they all stink! ...Just deal with it!","summary":"<h3><a id=\"the-break-flag-the-break-flag-and-the-cpubrk-instruction-seem-to-me-to-be-one-very-badly-thought-out-bodge.\" class=\"anchor\" href=\"#the-break-flag-the-break-flag-and-the-cpubrk-instruction-seem-to-me-to-be-one-very-badly-thought-out-bodge.\">  <svg class=\"octicon-link\" aria-hidden=\"true\">\n    <use href=\"#octicon-link\"/>\n  </svg>\n</a>The Break Flag The Break Flag and the <code><a href=\"../CPU.html#brk-instance-method\">CPU#brk</a></code> instruction seem to me to be one very badly thought out bodge.</h3>"},{"id":"DecimalMode","name":"DecimalMode","value":"3","doc":"### The Decimal Flag\nP.D dictates whether Addition (`CPU#adc`) and Subtraction (`CPU#sbc`) operate in the classic Binary or the more obscure [Binary Coded Decimal (BCD)](https://www.csh.rit.edu/~moffitt/docs/6502.html#BCD) mode.","summary":"<h3><a id=\"the-decimal-flag-p.d-dictates-whether-addition-cpuadc-and-subtraction-cpusbc-operate-in-the-classic-binary-or-the-more-obscure-binary-coded-decimal-bcd-mode.\" class=\"anchor\" href=\"#the-decimal-flag-p.d-dictates-whether-addition-cpuadc-and-subtraction-cpusbc-operate-in-the-classic-binary-or-the-more-obscure-binary-coded-decimal-bcd-mode.\">  <svg class=\"octicon-link\" aria-hidden=\"true\">\n    <use href=\"#octicon-link\"/>\n  </svg>\n</a>The Decimal Flag P.D dictates whether Addition (<code><a href=\"../CPU.html#adc%28m_value%3AUInt8%29-instance-method\">CPU#adc</a></code>) and Subtraction (<code><a href=\"../CPU.html#sbc%28m_value%3AUInt8%29-instance-method\">CPU#sbc</a></code>) operate in the classic Binary or the more obscure <a href=\"https://www.csh.rit.edu/~moffitt/docs/6502.html#BCD\">Binary Coded Decimal (BCD)</a> mode.</h3>"},{"id":"InterruptDisable","name":"InterruptDisable","value":"4","doc":"### The Interrupt (disable) Flag\nWhen P.I is SET, Interrupt ReQuest signals (IRQs) to the IRQ pin (classically pin-4) are IGNORED\nWhen P.I is CLEAR, signals to the IRQ pin are acknowledged.","summary":"<h3><a id=\"the-interrupt-disable-flag-when-p.i-is-set-interrupt-re-quest-signals-ir-qs-to-the-irq-pin-classically-pin-4-are-ignored-when-p.i-is-clear-signals-to-the-irq-pin-are-acknowledged.\" class=\"anchor\" href=\"#the-interrupt-disable-flag-when-p.i-is-set-interrupt-re-quest-signals-ir-qs-to-the-irq-pin-classically-pin-4-are-ignored-when-p.i-is-clear-signals-to-the-irq-pin-are-acknowledged.\">  <svg class=\"octicon-link\" aria-hidden=\"true\">\n    <use href=\"#octicon-link\"/>\n  </svg>\n</a>The Interrupt (disable) Flag When P.I is SET, Interrupt ReQuest signals (IRQs) to the IRQ pin (classically pin-4) are IGNORED When P.I is CLEAR, signals to the IRQ pin are acknowledged.</h3>"},{"id":"Zero","name":"Zero","value":"5","doc":"### The Zero Flag\nP.Z is SET when a zero value is placed in a register\nP.Z is CLEARed when a non-zero value is placed in a register","summary":"<h3><a id=\"the-zero-flag-p.z-is-set-when-a-zero-value-is-placed-in-a-register-p.z-is-clea-red-when-a-non-zero-value-is-placed-in-a-register\" class=\"anchor\" href=\"#the-zero-flag-p.z-is-set-when-a-zero-value-is-placed-in-a-register-p.z-is-clea-red-when-a-non-zero-value-is-placed-in-a-register\">  <svg class=\"octicon-link\" aria-hidden=\"true\">\n    <use href=\"#octicon-link\"/>\n  </svg>\n</a>The Zero Flag P.Z is SET when a zero value is placed in a register P.Z is CLEARed when a non-zero value is placed in a register</h3>"},{"id":"Carry","name":"Carry","value":"6","doc":"### The Carry Flag\nP.C can be considered to be the 9th bit of an arithmetic operation.","summary":"<h3><a id=\"the-carry-flag-p.c-can-be-considered-to-be-the-9th-bit-of-an-arithmetic-operation.\" class=\"anchor\" href=\"#the-carry-flag-p.c-can-be-considered-to-be-the-9th-bit-of-an-arithmetic-operation.\">  <svg class=\"octicon-link\" aria-hidden=\"true\">\n    <use href=\"#octicon-link\"/>\n  </svg>\n</a>The Carry Flag P.C can be considered to be the 9th bit of an arithmetic operation.</h3>"}],"namespace":{"html_id":"cr6502/CPU","kind":"class","full_name":"CPU","name":"CPU"},"doc":"The flags of the cpu","summary":"<p>The flags of the cpu</p>","instance_methods":[{"html_id":"break?-instance-method","name":"break?","abstract":false,"location":{"filename":"src/cr6502/6502.cr","line_number":170,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/6502.cr#L170"},"def":{"name":"break?","visibility":"Public","body":"self == Break"}},{"html_id":"carry?-instance-method","name":"carry?","abstract":false,"location":{"filename":"src/cr6502/6502.cr","line_number":184,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/6502.cr#L184"},"def":{"name":"carry?","visibility":"Public","body":"self == Carry"}},{"html_id":"decimal_mode?-instance-method","name":"decimal_mode?","abstract":false,"location":{"filename":"src/cr6502/6502.cr","line_number":173,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/6502.cr#L173"},"def":{"name":"decimal_mode?","visibility":"Public","body":"self == DecimalMode"}},{"html_id":"interrupt_disable?-instance-method","name":"interrupt_disable?","abstract":false,"location":{"filename":"src/cr6502/6502.cr","line_number":177,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/6502.cr#L177"},"def":{"name":"interrupt_disable?","visibility":"Public","body":"self == InterruptDisable"}},{"html_id":"negative?-instance-method","name":"negative?","abstract":false,"location":{"filename":"src/cr6502/6502.cr","line_number":149,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/6502.cr#L149"},"def":{"name":"negative?","visibility":"Public","body":"self == Negative"}},{"html_id":"overflow?-instance-method","name":"overflow?","abstract":false,"location":{"filename":"src/cr6502/6502.cr","line_number":157,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/6502.cr#L157"},"def":{"name":"overflow?","visibility":"Public","body":"self == Overflow"}},{"html_id":"zero?-instance-method","name":"zero?","abstract":false,"location":{"filename":"src/cr6502/6502.cr","line_number":181,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/6502.cr#L181"},"def":{"name":"zero?","visibility":"Public","body":"self == Zero"}}]},{"html_id":"cr6502/CPU/LineParsingException","path":"CPU/LineParsingException.html","kind":"class","full_name":"CPU::LineParsingException","name":"LineParsingException","abstract":false,"superclass":{"html_id":"cr6502/CPU/ASMException","kind":"class","full_name":"CPU::ASMException","name":"ASMException"},"ancestors":[{"html_id":"cr6502/CPU/ASMException","kind":"class","full_name":"CPU::ASMException","name":"ASMException"},{"html_id":"cr6502/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"cr6502/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cr6502/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cr6502/parser/error.cr","line_number":5,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/error.cr#L5"}],"repository_name":"cr6502","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"cr6502/CPU","kind":"class","full_name":"CPU","name":"CPU"}},{"html_id":"cr6502/CPU/Scanner","path":"CPU/Scanner.html","kind":"class","full_name":"CPU::Scanner","name":"Scanner","abstract":false,"superclass":{"html_id":"cr6502/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"cr6502/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cr6502/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cr6502/parser/scanner.cr","line_number":3,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/scanner.cr#L3"}],"repository_name":"cr6502","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"cr6502/CPU","kind":"class","full_name":"CPU","name":"CPU"},"doc":"The scanner for parsing","summary":"<p>The scanner for parsing</p>","constructors":[{"html_id":"new(source:String,line:Int32,labels:Array(Tuple(String,UInt16|UInt8,Bool)))-class-method","name":"new","abstract":false,"args":[{"name":"source","external_name":"source","restriction":"String"},{"name":"line","external_name":"line","restriction":"Int32"},{"name":"labels","external_name":"labels","restriction":"::Array(::Tuple(::String, ::UInt16 | ::UInt8, ::Bool))"}],"args_string":"(source : String, line : Int32, labels : Array(Tuple(String, UInt16 | UInt8, Bool)))","args_html":"(source : String, line : Int32, labels : Array(Tuple(String, UInt16 | UInt8, Bool)))","location":{"filename":"src/cr6502/parser/scanner.cr","line_number":14,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/scanner.cr#L14"},"def":{"name":"new","args":[{"name":"source","external_name":"source","restriction":"String"},{"name":"line","external_name":"line","restriction":"Int32"},{"name":"labels","external_name":"labels","restriction":"::Array(::Tuple(::String, ::UInt16 | ::UInt8, ::Bool))"}],"visibility":"Public","body":"_ = allocate\n_.initialize(source, line, labels)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"add_token(type:TokenType,literal:Int32|Nil=nil)-instance-method","name":"add_token","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"TokenType"},{"name":"literal","default_value":"nil","external_name":"literal","restriction":"Int32 | Nil"}],"args_string":"(type : TokenType, literal : Int32 | Nil = nil)","args_html":"(type : <a href=\"../CPU/TokenType.html\">TokenType</a>, literal : Int32 | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/cr6502/parser/scanner.cr","line_number":46,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/scanner.cr#L46"},"def":{"name":"add_token","args":[{"name":"type","external_name":"type","restriction":"TokenType"},{"name":"literal","default_value":"nil","external_name":"literal","restriction":"Int32 | Nil"}],"visibility":"Public","body":"start = @start\nif @start != 0\n  start = start + 1\nend\ntext = @source[start..@current]\n@tokens << (Token.new(type, text, literal))\n"}},{"html_id":"advance-instance-method","name":"advance","abstract":false,"location":{"filename":"src/cr6502/parser/scanner.cr","line_number":32,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/scanner.cr#L32"},"def":{"name":"advance","visibility":"Public","body":"if @current >= (@source.size - 1)\n  raise(ScannerException.new(\"Invalid line on line ##{@line}\"))\n  return '\\0'\nelse\n  return @source[@current = @current + 1]\nend"}},{"html_id":"binary-instance-method","name":"binary","abstract":false,"location":{"filename":"src/cr6502/parser/scanner.cr","line_number":121,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/scanner.cr#L121"},"def":{"name":"binary","visibility":"Public","body":"start = @start\nif @start != 0\n  start = start + 1\nend\nwhile (peek.ascii_number?(2)) && (!is_at_end)\n  advance\nend\nnum = @source[start..@current]\nif !(num.to_i?(2))\n  num = num.rchop\n  @current = @current - 1\nend\nif num.to_i?(2)\n  add_token(TokenType::Integer, num.to_i(2))\nend\n"}},{"html_id":"hex-instance-method","name":"hex","abstract":false,"location":{"filename":"src/cr6502/parser/scanner.cr","line_number":140,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/scanner.cr#L140"},"def":{"name":"hex","visibility":"Public","body":"start = @start\nif @start != 0\n  start = start + 1\nend\nwhile (peek.ascii_number?(16)) && (!is_at_end)\n  advance\nend\nnum = @source[start..@current]\nif !(num.to_i?(16))\n  num = num.rchop\n  @current = @current - 1\nend\nif num.to_i?(16)\n  add_token(TokenType::Integer, num.to_i(16))\nend\n"}},{"html_id":"identifier-instance-method","name":"identifier","abstract":false,"location":{"filename":"src/cr6502/parser/scanner.cr","line_number":183,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/scanner.cr#L183"},"def":{"name":"identifier","visibility":"Public","body":"start = @start\nif @start != 0\n  start = start + 1\nend\nlabel = false\nwhile !(KEYWORDS[@source[start..@current].upcase]? || is_at_end)\n  if @source[@current] == ';'\n    @current = @current - 1\n    break\n  else\n    if x = @labels.index do |l|\n      l[0] == @source[start..@current]\n    end\n      add_token(TokenType::Integer, @labels[x][1].to_i)\n      label = true\n      break\n    else\n      advance\n    end\n  end\nend\nif !label\n  if x = @labels.index do |l|\n    l[0] == @source[start..@current]\n  end\n    add_token(TokenType::Integer, @labels[x][1].to_i)\n  else\n    text = @source[start..@current]\n    type = KEYWORDS[text.upcase]?\n    if type\n    else\n      raise(ScannerException.new(\"Invalid command \\\"#{text.upcase}\\\" on line ##{@line}\"))\n    end\n    add_token(type)\n  end\nend\n"}},{"html_id":"is_alpha(c:Char)-instance-method","name":"is_alpha","abstract":false,"args":[{"name":"c","external_name":"c","restriction":"Char"}],"args_string":"(c : Char)","args_html":"(c : Char)","location":{"filename":"src/cr6502/parser/scanner.cr","line_number":214,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/scanner.cr#L214"},"def":{"name":"is_alpha","args":[{"name":"c","external_name":"c","restriction":"Char"}],"visibility":"Public","body":"return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')"}},{"html_id":"is_alpha_numeric(c:Char)-instance-method","name":"is_alpha_numeric","abstract":false,"args":[{"name":"c","external_name":"c","restriction":"Char"}],"args_string":"(c : Char)","args_html":"(c : Char)","location":{"filename":"src/cr6502/parser/scanner.cr","line_number":219,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/scanner.cr#L219"},"def":{"name":"is_alpha_numeric","args":[{"name":"c","external_name":"c","restriction":"Char"}],"visibility":"Public","body":"return (is_alpha(c)) || c.ascii_number?"}},{"html_id":"is_at_end-instance-method","name":"is_at_end","abstract":false,"location":{"filename":"src/cr6502/parser/scanner.cr","line_number":17,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/scanner.cr#L17"},"def":{"name":"is_at_end","visibility":"Public","body":"return @current >= (@source.size - 1)"}},{"html_id":"labels:Array(Tuple(String,UInt8|UInt16,Bool))-instance-method","name":"labels","abstract":false,"location":{"filename":"src/cr6502/parser/scanner.cr","line_number":6,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/scanner.cr#L6"},"def":{"name":"labels","return_type":"Array(Tuple(String, UInt8 | UInt16, Bool))","visibility":"Public","body":"@labels"}},{"html_id":"labels=(labels:Array(Tuple(String,UInt8|UInt16,Bool)))-instance-method","name":"labels=","abstract":false,"args":[{"name":"labels","external_name":"labels","restriction":"Array(Tuple(String, UInt8 | UInt16, Bool))"}],"args_string":"(labels : Array(Tuple(String, UInt8 | UInt16, Bool)))","args_html":"(labels : Array(Tuple(String, UInt8 | UInt16, Bool)))","location":{"filename":"src/cr6502/parser/scanner.cr","line_number":6,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/scanner.cr#L6"},"def":{"name":"labels=","args":[{"name":"labels","external_name":"labels","restriction":"Array(Tuple(String, UInt8 | UInt16, Bool))"}],"visibility":"Public","body":"@labels = labels"}},{"html_id":"match(expected:Char)-instance-method","name":"match","abstract":false,"args":[{"name":"expected","external_name":"expected","restriction":"Char"}],"args_string":"(expected : Char)","args_html":"(expected : Char)","location":{"filename":"src/cr6502/parser/scanner.cr","line_number":53,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/scanner.cr#L53"},"def":{"name":"match","args":[{"name":"expected","external_name":"expected","restriction":"Char"}],"visibility":"Public","body":"if is_at_end || (@source[@current] != expected)\n  return false\nend\n@current = @current + 1\nreturn true\n"}},{"html_id":"number-instance-method","name":"number","abstract":false,"location":{"filename":"src/cr6502/parser/scanner.cr","line_number":159,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/scanner.cr#L159"},"def":{"name":"number","visibility":"Public","body":"start = @start\nif @start != 0\n  start = start + 1\nend\nwhile peek.ascii_number? && (!is_at_end)\n  advance\nend\nnum = @source[start..@current]\nif !num.to_i?\n  num = num.rchop\n  @current = @current - 1\nend\nif num.to_i?\n  add_token(TokenType::Integer, num.to_i)\nend\n"}},{"html_id":"peek-instance-method","name":"peek","abstract":false,"location":{"filename":"src/cr6502/parser/scanner.cr","line_number":41,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/scanner.cr#L41"},"def":{"name":"peek","visibility":"Public","body":"if is_at_end\n  return '\\0'\nend\nreturn @source[@current]\n"}},{"html_id":"peek_next-instance-method","name":"peek_next","abstract":false,"location":{"filename":"src/cr6502/parser/scanner.cr","line_number":178,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/scanner.cr#L178"},"def":{"name":"peek_next","visibility":"Public","body":"if (@current + 1) >= @source.size\n  return '\\0'\nend\nreturn @source[@current + 1]\n"}},{"html_id":"scan_token(just_labels:Bool)-instance-method","name":"scan_token","abstract":false,"args":[{"name":"just_labels","external_name":"just_labels","restriction":"Bool"}],"args_string":"(just_labels : Bool)","args_html":"(just_labels : Bool)","location":{"filename":"src/cr6502/parser/scanner.cr","line_number":59,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/scanner.cr#L59"},"def":{"name":"scan_token","args":[{"name":"just_labels","external_name":"just_labels","restriction":"Bool"}],"visibility":"Public","body":"if just_labels\n  if @source[-1] == ':'\n    @current = @source.size - 1\n    add_token(TokenType::Label)\n    return\n  else\n    advance\n  end\nelse\n  if @source[0] == ';'\n    @current = @source.size - 1\n    return\n  end\n  if @source[-1] == ':'\n    @current = @source.size - 1\n    add_token(TokenType::Label)\n    return\n  end\n  c = advance\n  if @current_number_type != 0\n    case @current_number_type\n    when 1\n      hex\n    when 2\n      binary\n    end\n    @current_number_type = 0\n  else\n    case c\n    when ';'\n      @current = @source.size - 1\n    when '('\n      add_token(TokenType::LeftParen)\n    when ')'\n      add_token(TokenType::RightParen)\n    when '$'\n      add_token(TokenType::Dollar)\n      @current_number_type = 1\n    when '%'\n      add_token(TokenType::Percent)\n      @current_number_type = 2\n    when '#'\n      add_token(TokenType::Hash)\n    when ','\n      add_token(TokenType::Comma)\n    when 'X'\n      add_token(TokenType::X)\n    when 'Y'\n      add_token(TokenType::Y)\n    when 'x'\n      add_token(TokenType::X)\n    when 'y'\n      add_token(TokenType::Y)\n    when 'A'\n      add_token(TokenType::A)\n    when 'a'\n      add_token(TokenType::A)\n    when ' '\n    else\n      if c.ascii_number?\n        number\n      else\n        if is_alpha(c)\n          identifier\n        else\n          raise(ScannerException.new(\"Unexpected character on line ##{@line}\"))\n        end\n      end\n    end\n  end\nend"}},{"html_id":"scan_tokens(just_labels:Bool=false)-instance-method","name":"scan_tokens","abstract":false,"args":[{"name":"just_labels","default_value":"false","external_name":"just_labels","restriction":"Bool"}],"args_string":"(just_labels : Bool = false)","args_html":"(just_labels : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/cr6502/parser/scanner.cr","line_number":21,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/scanner.cr#L21"},"def":{"name":"scan_tokens","args":[{"name":"just_labels","default_value":"false","external_name":"just_labels","restriction":"Bool"}],"visibility":"Public","body":"@source = @source.strip\nwhile !is_at_end\n  @start = @current\n  scan_token(just_labels)\nend\n@tokens << (Token.new(TokenType::EOF, \"\"))\nreturn @tokens\n"}},{"html_id":"tokens:Array(Token)-instance-method","name":"tokens","abstract":false,"location":{"filename":"src/cr6502/parser/scanner.cr","line_number":5,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/scanner.cr#L5"},"def":{"name":"tokens","return_type":"Array(Token)","visibility":"Public","body":"@tokens"}},{"html_id":"tokens=(tokens:Array(Token))-instance-method","name":"tokens=","abstract":false,"args":[{"name":"tokens","external_name":"tokens","restriction":"Array(Token)"}],"args_string":"(tokens : Array(Token))","args_html":"(tokens : Array(<a href=\"../CPU/Token.html\">Token</a>))","location":{"filename":"src/cr6502/parser/scanner.cr","line_number":5,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/scanner.cr#L5"},"def":{"name":"tokens=","args":[{"name":"tokens","external_name":"tokens","restriction":"Array(Token)"}],"visibility":"Public","body":"@tokens = tokens"}}]},{"html_id":"cr6502/CPU/ScannerException","path":"CPU/ScannerException.html","kind":"class","full_name":"CPU::ScannerException","name":"ScannerException","abstract":false,"superclass":{"html_id":"cr6502/CPU/ASMException","kind":"class","full_name":"CPU::ASMException","name":"ASMException"},"ancestors":[{"html_id":"cr6502/CPU/ASMException","kind":"class","full_name":"CPU::ASMException","name":"ASMException"},{"html_id":"cr6502/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"cr6502/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cr6502/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cr6502/parser/error.cr","line_number":8,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/error.cr#L8"}],"repository_name":"cr6502","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"cr6502/CPU","kind":"class","full_name":"CPU","name":"CPU"}},{"html_id":"cr6502/CPU/Token","path":"CPU/Token.html","kind":"class","full_name":"CPU::Token","name":"Token","abstract":false,"superclass":{"html_id":"cr6502/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"cr6502/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cr6502/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cr6502/parser/token.cr","line_number":150,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L150"}],"repository_name":"cr6502","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"cr6502/CPU","kind":"class","full_name":"CPU","name":"CPU"},"doc":"A token, used when parsing","summary":"<p>A token, used when parsing</p>","constructors":[{"html_id":"new(type:TokenType,lexeme:String,literal:Int32|Float64|String|Nil=nil)-class-method","name":"new","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"TokenType"},{"name":"lexeme","external_name":"lexeme","restriction":"String"},{"name":"literal","default_value":"nil","external_name":"literal","restriction":"Int32 | Float64 | String | Nil"}],"args_string":"(type : TokenType, lexeme : String, literal : Int32 | Float64 | String | Nil = nil)","args_html":"(type : <a href=\"../CPU/TokenType.html\">TokenType</a>, lexeme : String, literal : Int32 | Float64 | String | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/cr6502/parser/token.cr","line_number":155,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L155"},"def":{"name":"new","args":[{"name":"type","external_name":"type","restriction":"TokenType"},{"name":"lexeme","external_name":"lexeme","restriction":"String"},{"name":"literal","default_value":"nil","external_name":"literal","restriction":"Int32 | Float64 | String | Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(type, lexeme, literal)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"lexeme:String-instance-method","name":"lexeme","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":152,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L152"},"def":{"name":"lexeme","return_type":"String","visibility":"Public","body":"@lexeme"}},{"html_id":"lexeme=(lexeme:String)-instance-method","name":"lexeme=","abstract":false,"args":[{"name":"lexeme","external_name":"lexeme","restriction":"String"}],"args_string":"(lexeme : String)","args_html":"(lexeme : String)","location":{"filename":"src/cr6502/parser/token.cr","line_number":152,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L152"},"def":{"name":"lexeme=","args":[{"name":"lexeme","external_name":"lexeme","restriction":"String"}],"visibility":"Public","body":"@lexeme = lexeme"}},{"html_id":"literal:Int32|Nil-instance-method","name":"literal","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":153,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L153"},"def":{"name":"literal","return_type":"Int32 | Nil","visibility":"Public","body":"@literal"}},{"html_id":"literal=(literal:Int32|Nil)-instance-method","name":"literal=","abstract":false,"args":[{"name":"literal","external_name":"literal","restriction":"Int32 | Nil"}],"args_string":"(literal : Int32 | Nil)","args_html":"(literal : Int32 | Nil)","location":{"filename":"src/cr6502/parser/token.cr","line_number":153,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L153"},"def":{"name":"literal=","args":[{"name":"literal","external_name":"literal","restriction":"Int32 | Nil"}],"visibility":"Public","body":"@literal = literal"}},{"html_id":"to_string-instance-method","name":"to_string","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":158,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L158"},"def":{"name":"to_string","visibility":"Public","body":"return (((@type + \" \") + @lexeme) + \" \") + @literal"}},{"html_id":"type:TokenType-instance-method","name":"type","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":151,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L151"},"def":{"name":"type","return_type":"TokenType","visibility":"Public","body":"@type"}},{"html_id":"type=(type:TokenType)-instance-method","name":"type=","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"TokenType"}],"args_string":"(type : TokenType)","args_html":"(type : <a href=\"../CPU/TokenType.html\">TokenType</a>)","location":{"filename":"src/cr6502/parser/token.cr","line_number":151,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L151"},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"TokenType"}],"visibility":"Public","body":"@type = type"}}]},{"html_id":"cr6502/CPU/TokenType","path":"CPU/TokenType.html","kind":"enum","full_name":"CPU::TokenType","name":"TokenType","abstract":false,"ancestors":[{"html_id":"cr6502/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"cr6502/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"cr6502/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cr6502/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cr6502/parser/token.cr","line_number":67,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L67"}],"repository_name":"cr6502","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"LeftParen","name":"LeftParen","value":"0"},{"id":"RightParen","name":"RightParen","value":"1"},{"id":"Percent","name":"Percent","value":"2"},{"id":"Hash","name":"Hash","value":"3"},{"id":"Dollar","name":"Dollar","value":"4"},{"id":"Comma","name":"Comma","value":"5"},{"id":"A","name":"A","value":"6"},{"id":"X","name":"X","value":"7"},{"id":"Y","name":"Y","value":"8"},{"id":"Integer","name":"Integer","value":"9"},{"id":"Identifier","name":"Identifier","value":"10"},{"id":"ADC","name":"ADC","value":"11"},{"id":"AND","name":"AND","value":"12"},{"id":"ASL","name":"ASL","value":"13"},{"id":"BCC","name":"BCC","value":"14"},{"id":"BCS","name":"BCS","value":"15"},{"id":"BEQ","name":"BEQ","value":"16"},{"id":"BIT","name":"BIT","value":"17"},{"id":"BMI","name":"BMI","value":"18"},{"id":"BNE","name":"BNE","value":"19"},{"id":"BPL","name":"BPL","value":"20"},{"id":"BRK","name":"BRK","value":"21"},{"id":"BVC","name":"BVC","value":"22"},{"id":"BVS","name":"BVS","value":"23"},{"id":"CLC","name":"CLC","value":"24"},{"id":"CLD","name":"CLD","value":"25"},{"id":"CLI","name":"CLI","value":"26"},{"id":"CLV","name":"CLV","value":"27"},{"id":"CMP","name":"CMP","value":"28"},{"id":"CPX","name":"CPX","value":"29"},{"id":"CPY","name":"CPY","value":"30"},{"id":"DEC","name":"DEC","value":"31"},{"id":"DEX","name":"DEX","value":"32"},{"id":"DEY","name":"DEY","value":"33"},{"id":"EOR","name":"EOR","value":"34"},{"id":"INC","name":"INC","value":"35"},{"id":"INX","name":"INX","value":"36"},{"id":"INY","name":"INY","value":"37"},{"id":"JMP","name":"JMP","value":"38"},{"id":"JSR","name":"JSR","value":"39"},{"id":"LDA","name":"LDA","value":"40"},{"id":"LDX","name":"LDX","value":"41"},{"id":"LDY","name":"LDY","value":"42"},{"id":"LSR","name":"LSR","value":"43"},{"id":"NOP","name":"NOP","value":"44"},{"id":"ORA","name":"ORA","value":"45"},{"id":"PHA","name":"PHA","value":"46"},{"id":"PHP","name":"PHP","value":"47"},{"id":"PLA","name":"PLA","value":"48"},{"id":"PLP","name":"PLP","value":"49"},{"id":"ROL","name":"ROL","value":"50"},{"id":"ROR","name":"ROR","value":"51"},{"id":"RTI","name":"RTI","value":"52"},{"id":"RTS","name":"RTS","value":"53"},{"id":"SBC","name":"SBC","value":"54"},{"id":"SEC","name":"SEC","value":"55"},{"id":"SED","name":"SED","value":"56"},{"id":"SEI","name":"SEI","value":"57"},{"id":"STA","name":"STA","value":"58"},{"id":"STX","name":"STX","value":"59"},{"id":"STY","name":"STY","value":"60"},{"id":"TAX","name":"TAX","value":"61"},{"id":"TAY","name":"TAY","value":"62"},{"id":"TSX","name":"TSX","value":"63"},{"id":"TXA","name":"TXA","value":"64"},{"id":"TXS","name":"TXS","value":"65"},{"id":"TYA","name":"TYA","value":"66"},{"id":"PRT","name":"PRT","value":"67","doc":"Custom","summary":"<p>Custom</p>"},{"id":"LOG","name":"LOG","value":"68"},{"id":"STP","name":"STP","value":"69"},{"id":"Label","name":"Label","value":"70"},{"id":"EOF","name":"EOF","value":"71"}],"namespace":{"html_id":"cr6502/CPU","kind":"class","full_name":"CPU","name":"CPU"},"doc":"The types of tokens, used when parsing","summary":"<p>The types of tokens, used when parsing</p>","instance_methods":[{"html_id":"a?-instance-method","name":"a?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":75,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L75"},"def":{"name":"a?","visibility":"Public","body":"self == A"}},{"html_id":"adc?-instance-method","name":"adc?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":82,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L82"},"def":{"name":"adc?","visibility":"Public","body":"self == ADC"}},{"html_id":"and?-instance-method","name":"and?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":83,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L83"},"def":{"name":"and?","visibility":"Public","body":"self == AND"}},{"html_id":"asl?-instance-method","name":"asl?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":84,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L84"},"def":{"name":"asl?","visibility":"Public","body":"self == ASL"}},{"html_id":"bcc?-instance-method","name":"bcc?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":85,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L85"},"def":{"name":"bcc?","visibility":"Public","body":"self == BCC"}},{"html_id":"bcs?-instance-method","name":"bcs?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":86,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L86"},"def":{"name":"bcs?","visibility":"Public","body":"self == BCS"}},{"html_id":"beq?-instance-method","name":"beq?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":87,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L87"},"def":{"name":"beq?","visibility":"Public","body":"self == BEQ"}},{"html_id":"bit?-instance-method","name":"bit?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":88,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L88"},"def":{"name":"bit?","visibility":"Public","body":"self == BIT"}},{"html_id":"bmi?-instance-method","name":"bmi?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":89,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L89"},"def":{"name":"bmi?","visibility":"Public","body":"self == BMI"}},{"html_id":"bne?-instance-method","name":"bne?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":90,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L90"},"def":{"name":"bne?","visibility":"Public","body":"self == BNE"}},{"html_id":"bpl?-instance-method","name":"bpl?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":91,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L91"},"def":{"name":"bpl?","visibility":"Public","body":"self == BPL"}},{"html_id":"brk?-instance-method","name":"brk?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":92,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L92"},"def":{"name":"brk?","visibility":"Public","body":"self == BRK"}},{"html_id":"bvc?-instance-method","name":"bvc?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":93,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L93"},"def":{"name":"bvc?","visibility":"Public","body":"self == BVC"}},{"html_id":"bvs?-instance-method","name":"bvs?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":94,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L94"},"def":{"name":"bvs?","visibility":"Public","body":"self == BVS"}},{"html_id":"clc?-instance-method","name":"clc?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":95,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L95"},"def":{"name":"clc?","visibility":"Public","body":"self == CLC"}},{"html_id":"cld?-instance-method","name":"cld?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":96,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L96"},"def":{"name":"cld?","visibility":"Public","body":"self == CLD"}},{"html_id":"cli?-instance-method","name":"cli?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":97,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L97"},"def":{"name":"cli?","visibility":"Public","body":"self == CLI"}},{"html_id":"clv?-instance-method","name":"clv?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":98,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L98"},"def":{"name":"clv?","visibility":"Public","body":"self == CLV"}},{"html_id":"cmp?-instance-method","name":"cmp?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":99,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L99"},"def":{"name":"cmp?","visibility":"Public","body":"self == CMP"}},{"html_id":"comma?-instance-method","name":"comma?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":73,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L73"},"def":{"name":"comma?","visibility":"Public","body":"self == Comma"}},{"html_id":"cpx?-instance-method","name":"cpx?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":100,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L100"},"def":{"name":"cpx?","visibility":"Public","body":"self == CPX"}},{"html_id":"cpy?-instance-method","name":"cpy?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":101,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L101"},"def":{"name":"cpy?","visibility":"Public","body":"self == CPY"}},{"html_id":"dec?-instance-method","name":"dec?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":102,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L102"},"def":{"name":"dec?","visibility":"Public","body":"self == DEC"}},{"html_id":"dex?-instance-method","name":"dex?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":103,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L103"},"def":{"name":"dex?","visibility":"Public","body":"self == DEX"}},{"html_id":"dey?-instance-method","name":"dey?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":104,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L104"},"def":{"name":"dey?","visibility":"Public","body":"self == DEY"}},{"html_id":"dollar?-instance-method","name":"dollar?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":72,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L72"},"def":{"name":"dollar?","visibility":"Public","body":"self == Dollar"}},{"html_id":"eof?-instance-method","name":"eof?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":146,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L146"},"def":{"name":"eof?","visibility":"Public","body":"self == EOF"}},{"html_id":"eor?-instance-method","name":"eor?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":105,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L105"},"def":{"name":"eor?","visibility":"Public","body":"self == EOR"}},{"html_id":"hash?-instance-method","name":"hash?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":71,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L71"},"def":{"name":"hash?","visibility":"Public","body":"self == Hash"}},{"html_id":"identifier?-instance-method","name":"identifier?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":80,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L80"},"def":{"name":"identifier?","visibility":"Public","body":"self == Identifier"}},{"html_id":"inc?-instance-method","name":"inc?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":106,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L106"},"def":{"name":"inc?","visibility":"Public","body":"self == INC"}},{"html_id":"integer?-instance-method","name":"integer?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":79,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L79"},"def":{"name":"integer?","visibility":"Public","body":"self == Integer"}},{"html_id":"inx?-instance-method","name":"inx?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":107,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L107"},"def":{"name":"inx?","visibility":"Public","body":"self == INX"}},{"html_id":"iny?-instance-method","name":"iny?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":108,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L108"},"def":{"name":"iny?","visibility":"Public","body":"self == INY"}},{"html_id":"jmp?-instance-method","name":"jmp?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":109,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L109"},"def":{"name":"jmp?","visibility":"Public","body":"self == JMP"}},{"html_id":"jsr?-instance-method","name":"jsr?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":110,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L110"},"def":{"name":"jsr?","visibility":"Public","body":"self == JSR"}},{"html_id":"label?-instance-method","name":"label?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":144,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L144"},"def":{"name":"label?","visibility":"Public","body":"self == Label"}},{"html_id":"lda?-instance-method","name":"lda?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":111,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L111"},"def":{"name":"lda?","visibility":"Public","body":"self == LDA"}},{"html_id":"ldx?-instance-method","name":"ldx?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":112,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L112"},"def":{"name":"ldx?","visibility":"Public","body":"self == LDX"}},{"html_id":"ldy?-instance-method","name":"ldy?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":113,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L113"},"def":{"name":"ldy?","visibility":"Public","body":"self == LDY"}},{"html_id":"left_paren?-instance-method","name":"left_paren?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":68,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L68"},"def":{"name":"left_paren?","visibility":"Public","body":"self == LeftParen"}},{"html_id":"log?-instance-method","name":"log?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":141,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L141"},"def":{"name":"log?","visibility":"Public","body":"self == LOG"}},{"html_id":"lsr?-instance-method","name":"lsr?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":114,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L114"},"def":{"name":"lsr?","visibility":"Public","body":"self == LSR"}},{"html_id":"nop?-instance-method","name":"nop?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":115,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L115"},"def":{"name":"nop?","visibility":"Public","body":"self == NOP"}},{"html_id":"ora?-instance-method","name":"ora?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":116,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L116"},"def":{"name":"ora?","visibility":"Public","body":"self == ORA"}},{"html_id":"percent?-instance-method","name":"percent?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":70,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L70"},"def":{"name":"percent?","visibility":"Public","body":"self == Percent"}},{"html_id":"pha?-instance-method","name":"pha?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":117,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L117"},"def":{"name":"pha?","visibility":"Public","body":"self == PHA"}},{"html_id":"php?-instance-method","name":"php?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":118,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L118"},"def":{"name":"php?","visibility":"Public","body":"self == PHP"}},{"html_id":"pla?-instance-method","name":"pla?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":119,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L119"},"def":{"name":"pla?","visibility":"Public","body":"self == PLA"}},{"html_id":"plp?-instance-method","name":"plp?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":120,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L120"},"def":{"name":"plp?","visibility":"Public","body":"self == PLP"}},{"html_id":"prt?-instance-method","name":"prt?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":140,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L140"},"def":{"name":"prt?","visibility":"Public","body":"self == PRT"}},{"html_id":"right_paren?-instance-method","name":"right_paren?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":69,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L69"},"def":{"name":"right_paren?","visibility":"Public","body":"self == RightParen"}},{"html_id":"rol?-instance-method","name":"rol?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":121,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L121"},"def":{"name":"rol?","visibility":"Public","body":"self == ROL"}},{"html_id":"ror?-instance-method","name":"ror?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":122,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L122"},"def":{"name":"ror?","visibility":"Public","body":"self == ROR"}},{"html_id":"rti?-instance-method","name":"rti?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":123,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L123"},"def":{"name":"rti?","visibility":"Public","body":"self == RTI"}},{"html_id":"rts?-instance-method","name":"rts?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":124,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L124"},"def":{"name":"rts?","visibility":"Public","body":"self == RTS"}},{"html_id":"sbc?-instance-method","name":"sbc?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":125,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L125"},"def":{"name":"sbc?","visibility":"Public","body":"self == SBC"}},{"html_id":"sec?-instance-method","name":"sec?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":126,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L126"},"def":{"name":"sec?","visibility":"Public","body":"self == SEC"}},{"html_id":"sed?-instance-method","name":"sed?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":127,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L127"},"def":{"name":"sed?","visibility":"Public","body":"self == SED"}},{"html_id":"sei?-instance-method","name":"sei?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":128,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L128"},"def":{"name":"sei?","visibility":"Public","body":"self == SEI"}},{"html_id":"sta?-instance-method","name":"sta?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":129,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L129"},"def":{"name":"sta?","visibility":"Public","body":"self == STA"}},{"html_id":"stp?-instance-method","name":"stp?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":142,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L142"},"def":{"name":"stp?","visibility":"Public","body":"self == STP"}},{"html_id":"stx?-instance-method","name":"stx?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":130,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L130"},"def":{"name":"stx?","visibility":"Public","body":"self == STX"}},{"html_id":"sty?-instance-method","name":"sty?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":131,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L131"},"def":{"name":"sty?","visibility":"Public","body":"self == STY"}},{"html_id":"tax?-instance-method","name":"tax?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":132,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L132"},"def":{"name":"tax?","visibility":"Public","body":"self == TAX"}},{"html_id":"tay?-instance-method","name":"tay?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":133,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L133"},"def":{"name":"tay?","visibility":"Public","body":"self == TAY"}},{"html_id":"tsx?-instance-method","name":"tsx?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":134,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L134"},"def":{"name":"tsx?","visibility":"Public","body":"self == TSX"}},{"html_id":"txa?-instance-method","name":"txa?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":135,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L135"},"def":{"name":"txa?","visibility":"Public","body":"self == TXA"}},{"html_id":"txs?-instance-method","name":"txs?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":136,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L136"},"def":{"name":"txs?","visibility":"Public","body":"self == TXS"}},{"html_id":"tya?-instance-method","name":"tya?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":137,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L137"},"def":{"name":"tya?","visibility":"Public","body":"self == TYA"}},{"html_id":"x?-instance-method","name":"x?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":76,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L76"},"def":{"name":"x?","visibility":"Public","body":"self == X"}},{"html_id":"y?-instance-method","name":"y?","abstract":false,"location":{"filename":"src/cr6502/parser/token.cr","line_number":77,"url":"https://github.com/D-Shwagginz/cr6502/blob/a4e100644c7227e63a2483807c787806c2eadbe9/src/cr6502/parser/token.cr#L77"},"def":{"name":"y?","visibility":"Public","body":"self == Y"}}]}]}]}}